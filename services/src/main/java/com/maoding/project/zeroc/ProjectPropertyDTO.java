// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `ProjectData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.project.zeroc;

public class ProjectPropertyDTO implements java.lang.Cloneable,
                                           java.io.Serializable
{
    public String fieldName;

    public String getFieldName()
    {
        return fieldName;
    }

    public void setFieldName(String fieldName)
    {
        this.fieldName = fieldName;
    }

    public String fieldValue;

    public String getFieldValue()
    {
        return fieldValue;
    }

    public void setFieldValue(String fieldValue)
    {
        this.fieldValue = fieldValue;
    }

    public String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public String unit;

    public String getUnit()
    {
        return unit;
    }

    public void setUnit(String unit)
    {
        this.unit = unit;
    }

    public ProjectPropertyDTO()
    {
        this.fieldName = "";
        this.fieldValue = "";
        this.id = "";
        this.unit = "";
    }

    public ProjectPropertyDTO(String fieldName, String fieldValue, String id, String unit)
    {
        this.fieldName = fieldName;
        this.fieldValue = fieldValue;
        this.id = id;
        this.unit = unit;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ProjectPropertyDTO r = null;
        if(rhs instanceof ProjectPropertyDTO)
        {
            r = (ProjectPropertyDTO)rhs;
        }

        if(r != null)
        {
            if(this.fieldName != r.fieldName)
            {
                if(this.fieldName == null || r.fieldName == null || !this.fieldName.equals(r.fieldName))
                {
                    return false;
                }
            }
            if(this.fieldValue != r.fieldValue)
            {
                if(this.fieldValue == null || r.fieldValue == null || !this.fieldValue.equals(r.fieldValue))
                {
                    return false;
                }
            }
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.unit != r.unit)
            {
                if(this.unit == null || r.unit == null || !this.unit.equals(r.unit))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::ProjectPropertyDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fieldName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fieldValue);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, unit);
        return h_;
    }

    public ProjectPropertyDTO clone()
    {
        ProjectPropertyDTO c = null;
        try
        {
            c = (ProjectPropertyDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.fieldName);
        ostr.writeString(this.fieldValue);
        ostr.writeString(this.id);
        ostr.writeString(this.unit);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fieldName = istr.readString();
        this.fieldValue = istr.readString();
        this.id = istr.readString();
        this.unit = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ProjectPropertyDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ProjectPropertyDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        ProjectPropertyDTO v = new ProjectPropertyDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ProjectPropertyDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ProjectPropertyDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ProjectPropertyDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(ProjectPropertyDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ProjectPropertyDTO _nullMarshalValue = new ProjectPropertyDTO();

    public static final long serialVersionUID = 1384622336L;
}
