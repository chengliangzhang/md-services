// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class QueryNodeInfoDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public QueryNodeInfoTextDTO textQuery;

    public QueryNodeInfoTextDTO getTextQuery()
    {
        return textQuery;
    }

    public void setTextQuery(QueryNodeInfoTextDTO textQuery)
    {
        this.textQuery = textQuery;
    }

    public QueryNodeInfoFileDTO fileQuery;

    public QueryNodeInfoFileDTO getFileQuery()
    {
        return fileQuery;
    }

    public void setFileQuery(QueryNodeInfoFileDTO fileQuery)
    {
        this.fileQuery = fileQuery;
    }

    public QueryNodeInfoHistoryDTO historyQuery;

    public QueryNodeInfoHistoryDTO getHistoryQuery()
    {
        return historyQuery;
    }

    public void setHistoryQuery(QueryNodeInfoHistoryDTO historyQuery)
    {
        this.historyQuery = historyQuery;
    }

    public QueryNodeInfoDTO()
    {
        this.textQuery = new QueryNodeInfoTextDTO();
        this.fileQuery = new QueryNodeInfoFileDTO();
        this.historyQuery = new QueryNodeInfoHistoryDTO();
    }

    public QueryNodeInfoDTO(QueryNodeInfoTextDTO textQuery, QueryNodeInfoFileDTO fileQuery, QueryNodeInfoHistoryDTO historyQuery)
    {
        this.textQuery = textQuery;
        this.fileQuery = fileQuery;
        this.historyQuery = historyQuery;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        QueryNodeInfoDTO r = null;
        if(rhs instanceof QueryNodeInfoDTO)
        {
            r = (QueryNodeInfoDTO)rhs;
        }

        if(r != null)
        {
            if(this.textQuery != r.textQuery)
            {
                if(this.textQuery == null || r.textQuery == null || !this.textQuery.equals(r.textQuery))
                {
                    return false;
                }
            }
            if(this.fileQuery != r.fileQuery)
            {
                if(this.fileQuery == null || r.fileQuery == null || !this.fileQuery.equals(r.fileQuery))
                {
                    return false;
                }
            }
            if(this.historyQuery != r.historyQuery)
            {
                if(this.historyQuery == null || r.historyQuery == null || !this.historyQuery.equals(r.historyQuery))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::QueryNodeInfoDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, textQuery);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileQuery);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, historyQuery);
        return h_;
    }

    public QueryNodeInfoDTO clone()
    {
        QueryNodeInfoDTO c = null;
        try
        {
            c = (QueryNodeInfoDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        QueryNodeInfoTextDTO.ice_write(ostr, this.textQuery);
        QueryNodeInfoFileDTO.ice_write(ostr, this.fileQuery);
        QueryNodeInfoHistoryDTO.ice_write(ostr, this.historyQuery);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.textQuery = QueryNodeInfoTextDTO.ice_read(istr);
        this.fileQuery = QueryNodeInfoFileDTO.ice_read(istr);
        this.historyQuery = QueryNodeInfoHistoryDTO.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, QueryNodeInfoDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public QueryNodeInfoDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        QueryNodeInfoDTO v = new QueryNodeInfoDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<QueryNodeInfoDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, QueryNodeInfoDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<QueryNodeInfoDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(QueryNodeInfoDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final QueryNodeInfoDTO _nullMarshalValue = new QueryNodeInfoDTO();

    public static final long serialVersionUID = -1917458939L;
}
