// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class SummaryFileServerDTO implements java.lang.Cloneable,
                                             java.io.Serializable
{
    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String BaseDir;

    public String getBaseDir()
    {
        return BaseDir;
    }

    public void setBaseDir(String BaseDir)
    {
        this.BaseDir = BaseDir;
    }

    public long usageSize;

    public long getUsageSize()
    {
        return usageSize;
    }

    public void setUsageSize(long usageSize)
    {
        this.usageSize = usageSize;
    }

    public SummaryFileServerDTO()
    {
        this.serverTypeId = "";
        this.serverAddress = "";
        this.BaseDir = "";
    }

    public SummaryFileServerDTO(String serverTypeId, String serverAddress, String BaseDir, long usageSize)
    {
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.BaseDir = BaseDir;
        this.usageSize = usageSize;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SummaryFileServerDTO r = null;
        if(rhs instanceof SummaryFileServerDTO)
        {
            r = (SummaryFileServerDTO)rhs;
        }

        if(r != null)
        {
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.BaseDir != r.BaseDir)
            {
                if(this.BaseDir == null || r.BaseDir == null || !this.BaseDir.equals(r.BaseDir))
                {
                    return false;
                }
            }
            if(this.usageSize != r.usageSize)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::SummaryFileServerDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, BaseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, usageSize);
        return h_;
    }

    public SummaryFileServerDTO clone()
    {
        SummaryFileServerDTO c = null;
        try
        {
            c = (SummaryFileServerDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.BaseDir);
        ostr.writeLong(this.usageSize);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.serverTypeId = istr.readString();
        this.serverAddress = istr.readString();
        this.BaseDir = istr.readString();
        this.usageSize = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SummaryFileServerDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SummaryFileServerDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        SummaryFileServerDTO v = new SummaryFileServerDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SummaryFileServerDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SummaryFileServerDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SummaryFileServerDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SummaryFileServerDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SummaryFileServerDTO _nullMarshalValue = new SummaryFileServerDTO();

    public static final long serialVersionUID = -293325453L;
}
