// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class SummaryFileCompanyDTO implements java.lang.Cloneable,
                                              java.io.Serializable
{
    public String companyId;

    public String getCompanyId()
    {
        return companyId;
    }

    public void setCompanyId(String companyId)
    {
        this.companyId = companyId;
    }

    public long allocSize;

    public long getAllocSize()
    {
        return allocSize;
    }

    public void setAllocSize(long allocSize)
    {
        this.allocSize = allocSize;
    }

    public long usageSize;

    public long getUsageSize()
    {
        return usageSize;
    }

    public void setUsageSize(long usageSize)
    {
        this.usageSize = usageSize;
    }

    public long skyUsageSize;

    public long getSkyUsageSize()
    {
        return skyUsageSize;
    }

    public void setSkyUsageSize(long skyUsageSize)
    {
        this.skyUsageSize = skyUsageSize;
    }

    public java.util.List<SummaryFileServerDTO> serverList;

    public java.util.List<SummaryFileServerDTO> getServerList()
    {
        return serverList;
    }

    public void setServerList(java.util.List<SummaryFileServerDTO> serverList)
    {
        this.serverList = serverList;
    }

    public SummaryFileCompanyDTO()
    {
        this.companyId = "";
    }

    public SummaryFileCompanyDTO(String companyId, long allocSize, long usageSize, long skyUsageSize, java.util.List<SummaryFileServerDTO> serverList)
    {
        this.companyId = companyId;
        this.allocSize = allocSize;
        this.usageSize = usageSize;
        this.skyUsageSize = skyUsageSize;
        this.serverList = serverList;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SummaryFileCompanyDTO r = null;
        if(rhs instanceof SummaryFileCompanyDTO)
        {
            r = (SummaryFileCompanyDTO)rhs;
        }

        if(r != null)
        {
            if(this.companyId != r.companyId)
            {
                if(this.companyId == null || r.companyId == null || !this.companyId.equals(r.companyId))
                {
                    return false;
                }
            }
            if(this.allocSize != r.allocSize)
            {
                return false;
            }
            if(this.usageSize != r.usageSize)
            {
                return false;
            }
            if(this.skyUsageSize != r.skyUsageSize)
            {
                return false;
            }
            if(this.serverList != r.serverList)
            {
                if(this.serverList == null || r.serverList == null || !this.serverList.equals(r.serverList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::SummaryFileCompanyDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, companyId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, allocSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, usageSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, skyUsageSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverList);
        return h_;
    }

    public SummaryFileCompanyDTO clone()
    {
        SummaryFileCompanyDTO c = null;
        try
        {
            c = (SummaryFileCompanyDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.companyId);
        ostr.writeLong(this.allocSize);
        ostr.writeLong(this.usageSize);
        ostr.writeLong(this.skyUsageSize);
        SummaryFileServerListHelper.write(ostr, this.serverList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.companyId = istr.readString();
        this.allocSize = istr.readLong();
        this.usageSize = istr.readLong();
        this.skyUsageSize = istr.readLong();
        this.serverList = SummaryFileServerListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SummaryFileCompanyDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SummaryFileCompanyDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        SummaryFileCompanyDTO v = new SummaryFileCompanyDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SummaryFileCompanyDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SummaryFileCompanyDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SummaryFileCompanyDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SummaryFileCompanyDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SummaryFileCompanyDTO _nullMarshalValue = new SummaryFileCompanyDTO();

    public static final long serialVersionUID = -1457493573L;
}
