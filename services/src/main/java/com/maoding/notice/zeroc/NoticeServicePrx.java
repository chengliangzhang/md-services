// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Notice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.notice.zeroc;

public interface NoticeServicePrx extends com.zeroc.Ice.ObjectPrx
{
    default void createTopic(String topic)
        throws com.maoding.common.zeroc.CustomException
    {
        createTopic(topic, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void createTopic(String topic, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_createTopicAsync(topic, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> createTopicAsync(String topic)
    {
        return _iceI_createTopicAsync(topic, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> createTopicAsync(String topic, java.util.Map<String, String> context)
    {
        return _iceI_createTopicAsync(topic, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_createTopicAsync(String iceP_topic, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createTopic", null, sync, _iceE_createTopic);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_topic);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_createTopic =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default java.util.List<java.lang.String> listTopic()
        throws com.maoding.common.zeroc.CustomException
    {
        return listTopic(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<java.lang.String> listTopic(java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            return _iceI_listTopicAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listTopicAsync()
    {
        return _iceI_listTopicAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listTopicAsync(java.util.Map<String, String> context)
    {
        return _iceI_listTopicAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> _iceI_listTopicAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listTopic", null, sync, _iceE_listTopic);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<java.lang.String> ret;
                     ret = com.maoding.common.zeroc.StringListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listTopic =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default java.util.List<java.lang.String> listSubscribedTopic(String userId)
        throws com.maoding.common.zeroc.CustomException
    {
        return listSubscribedTopic(userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<java.lang.String> listSubscribedTopic(String userId, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            return _iceI_listSubscribedTopicAsync(userId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listSubscribedTopicAsync(String userId)
    {
        return _iceI_listSubscribedTopicAsync(userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listSubscribedTopicAsync(String userId, java.util.Map<String, String> context)
    {
        return _iceI_listSubscribedTopicAsync(userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> _iceI_listSubscribedTopicAsync(String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubscribedTopic", null, sync, _iceE_listSubscribedTopic);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_userId);
                 }, istr -> {
                     java.util.List<java.lang.String> ret;
                     ret = com.maoding.common.zeroc.StringListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listSubscribedTopic =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void notice(MessageDTO message, String topic)
        throws com.maoding.common.zeroc.CustomException
    {
        notice(message, topic, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void notice(MessageDTO message, String topic, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_noticeAsync(message, topic, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> noticeAsync(MessageDTO message, String topic)
    {
        return _iceI_noticeAsync(message, topic, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noticeAsync(MessageDTO message, String topic, java.util.Map<String, String> context)
    {
        return _iceI_noticeAsync(message, topic, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noticeAsync(MessageDTO iceP_message, String iceP_topic, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "notice", null, sync, _iceE_notice);
        f.invoke(true, context, null, ostr -> {
                     MessageDTO.ice_write(ostr, iceP_message);
                     ostr.writeString(iceP_topic);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_notice =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void noticeToUser(MessageDTO message, String id)
        throws com.maoding.common.zeroc.CustomException
    {
        noticeToUser(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void noticeToUser(MessageDTO message, String id, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_noticeToUserAsync(message, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToUserAsync(MessageDTO message, String id)
    {
        return _iceI_noticeToUserAsync(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToUserAsync(MessageDTO message, String id, java.util.Map<String, String> context)
    {
        return _iceI_noticeToUserAsync(message, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noticeToUserAsync(MessageDTO iceP_message, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "noticeToUser", null, sync, _iceE_noticeToUser);
        f.invoke(true, context, null, ostr -> {
                     MessageDTO.ice_write(ostr, iceP_message);
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_noticeToUser =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void noticeToTask(MessageDTO message, String id)
        throws com.maoding.common.zeroc.CustomException
    {
        noticeToTask(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void noticeToTask(MessageDTO message, String id, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_noticeToTaskAsync(message, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToTaskAsync(MessageDTO message, String id)
    {
        return _iceI_noticeToTaskAsync(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToTaskAsync(MessageDTO message, String id, java.util.Map<String, String> context)
    {
        return _iceI_noticeToTaskAsync(message, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noticeToTaskAsync(MessageDTO iceP_message, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "noticeToTask", null, sync, _iceE_noticeToTask);
        f.invoke(true, context, null, ostr -> {
                     MessageDTO.ice_write(ostr, iceP_message);
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_noticeToTask =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void noticeToProject(MessageDTO message, String id)
        throws com.maoding.common.zeroc.CustomException
    {
        noticeToProject(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void noticeToProject(MessageDTO message, String id, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_noticeToProjectAsync(message, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToProjectAsync(MessageDTO message, String id)
    {
        return _iceI_noticeToProjectAsync(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToProjectAsync(MessageDTO message, String id, java.util.Map<String, String> context)
    {
        return _iceI_noticeToProjectAsync(message, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noticeToProjectAsync(MessageDTO iceP_message, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "noticeToProject", null, sync, _iceE_noticeToProject);
        f.invoke(true, context, null, ostr -> {
                     MessageDTO.ice_write(ostr, iceP_message);
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_noticeToProject =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void noticeToCompany(MessageDTO message, String id)
        throws com.maoding.common.zeroc.CustomException
    {
        noticeToCompany(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void noticeToCompany(MessageDTO message, String id, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_noticeToCompanyAsync(message, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToCompanyAsync(MessageDTO message, String id)
    {
        return _iceI_noticeToCompanyAsync(message, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noticeToCompanyAsync(MessageDTO message, String id, java.util.Map<String, String> context)
    {
        return _iceI_noticeToCompanyAsync(message, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noticeToCompanyAsync(MessageDTO iceP_message, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "noticeToCompany", null, sync, _iceE_noticeToCompany);
        f.invoke(true, context, null, ostr -> {
                     MessageDTO.ice_write(ostr, iceP_message);
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_noticeToCompany =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopic(String topic, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopic(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopic(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicAsync(topic, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicAsync(String topic, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicAsync(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicAsync(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicAsync(topic, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicAsync(String iceP_topic, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopic", null, sync, _iceE_subscribeTopic);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_topic);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopic =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForAccount(account, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForAccountAsync(account, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForAccountAsync(account, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForAccountAsync(account, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO iceP_account, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForAccount", null, sync, _iceE_subscribeTopicForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.user.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForAccount =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForAccount(account, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForAccountAsync(account, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForAccountAsync(account, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForAccountAsync(account, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForAccountAsync(com.maoding.user.zeroc.AccountDTO iceP_account, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForAccount", null, sync, _iceE_unSubscribeTopicForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.user.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForAccount =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForWeb(String topic, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForWeb(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForWeb(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForWebAsync(topic, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForWebAsync(String topic, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForWebAsync(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForWebAsync(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForWebAsync(topic, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForWebAsync(String iceP_topic, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForWeb", null, sync, _iceE_subscribeTopicForWeb);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_topic);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForWeb =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForUser(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForUser(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForUser(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForUserAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForUserAsync(String id, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForUserAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForUserAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForUserAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForUserAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForUser", null, sync, _iceE_subscribeTopicForUser);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForUser =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForTask(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForTask(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForTask(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForTaskAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForTaskAsync(String id, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForTaskAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForTaskAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForTaskAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForTaskAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForTask", null, sync, _iceE_subscribeTopicForTask);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForTask =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForProject(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForProject(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForProject(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForProjectAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForProjectAsync(String id, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForProjectAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForProjectAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForProjectAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForProjectAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForProject", null, sync, _iceE_subscribeTopicForProject);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForProject =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForCompany(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForCompany(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForCompany(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForCompanyAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForCompanyAsync(String id, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForCompanyAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForCompanyAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForCompanyAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForCompanyAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForCompany", null, sync, _iceE_subscribeTopicForCompany);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForCompany =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForTaskList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForTaskListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForTaskListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForTaskListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForTaskListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForTaskListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForTaskListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForTaskList", null, sync, _iceE_subscribeTopicForTaskList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForTaskList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForProjectList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForProjectListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForProjectListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForProjectListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForProjectListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForProjectListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForProjectListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForProjectList", null, sync, _iceE_subscribeTopicForProjectList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForProjectList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void subscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        subscribeTopicForCompanyList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void subscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_subscribeTopicForCompanyListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForCompanyListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_subscribeTopicForCompanyListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> subscribeTopicForCompanyListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_subscribeTopicForCompanyListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_subscribeTopicForCompanyListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "subscribeTopicForCompanyList", null, sync, _iceE_subscribeTopicForCompanyList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_subscribeTopicForCompanyList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopic(String topic, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopic(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopic(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicAsync(topic, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicAsync(String topic, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicAsync(topic, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicAsync(String topic, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicAsync(topic, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicAsync(String iceP_topic, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopic", null, sync, _iceE_unSubscribeTopic);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_topic);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopic =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForUser(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForUser(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForUser(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForUserAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForUserAsync(String id, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForUserAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForUserAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForUserAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForUserAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForUser", null, sync, _iceE_unSubscribeTopicForUser);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForUser =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForTask(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForTask(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForTask(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForTaskAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForTaskAsync(String id, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForTaskAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForTaskAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForTaskAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForTaskAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForTask", null, sync, _iceE_unSubscribeTopicForTask);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForTask =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForProject(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForProject(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForProject(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForProjectAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForProjectAsync(String id, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForProjectAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForProjectAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForProjectAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForProjectAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForProject", null, sync, _iceE_unSubscribeTopicForProject);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForProject =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForCompany(String id, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForCompany(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForCompany(String id, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForCompanyAsync(id, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForCompanyAsync(String id, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForCompanyAsync(id, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForCompanyAsync(String id, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForCompanyAsync(id, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForCompanyAsync(String iceP_id, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForCompany", null, sync, _iceE_unSubscribeTopicForCompany);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForCompany =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForTaskList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForTaskListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForTaskListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForTaskListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForTaskListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForTaskListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForTaskListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForTaskList", null, sync, _iceE_unSubscribeTopicForTaskList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForTaskList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForProjectList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForProjectListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForProjectListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForProjectListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForProjectListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForProjectListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForProjectListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForProjectList", null, sync, _iceE_unSubscribeTopicForProjectList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForProjectList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void unSubscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client)
        throws com.maoding.common.zeroc.CustomException
    {
        unSubscribeTopicForCompanyList(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unSubscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_unSubscribeTopicForCompanyListAsync(idList, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForCompanyListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client)
    {
        return _iceI_unSubscribeTopicForCompanyListAsync(idList, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unSubscribeTopicForCompanyListAsync(java.util.List<java.lang.String> idList, NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_unSubscribeTopicForCompanyListAsync(idList, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unSubscribeTopicForCompanyListAsync(java.util.List<java.lang.String> iceP_idList, NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unSubscribeTopicForCompanyList", null, sync, _iceE_unSubscribeTopicForCompanyList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.common.zeroc.StringListHelper.write(ostr, iceP_idList);
                     ostr.writeProxy(iceP_client);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_unSubscribeTopicForCompanyList =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void sendNotice(NoticeRequestDTO request)
        throws com.maoding.common.zeroc.CustomException
    {
        sendNotice(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sendNotice(NoticeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_sendNoticeAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> sendNoticeAsync(NoticeRequestDTO request)
    {
        return _iceI_sendNoticeAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sendNoticeAsync(NoticeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_sendNoticeAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendNoticeAsync(NoticeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sendNotice", null, sync, _iceE_sendNotice);
        f.invoke(true, context, null, ostr -> {
                     NoticeRequestDTO.ice_write(ostr, iceP_request);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_sendNotice =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    default void sendNoticeForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeRequestDTO request)
        throws com.maoding.common.zeroc.CustomException
    {
        sendNoticeForAccount(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sendNoticeForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.common.zeroc.CustomException
    {
        try
        {
            _iceI_sendNoticeForAccountAsync(account, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> sendNoticeForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeRequestDTO request)
    {
        return _iceI_sendNoticeForAccountAsync(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sendNoticeForAccountAsync(com.maoding.user.zeroc.AccountDTO account, NoticeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_sendNoticeForAccountAsync(account, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendNoticeForAccountAsync(com.maoding.user.zeroc.AccountDTO iceP_account, NoticeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sendNoticeForAccount", null, sync, _iceE_sendNoticeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.user.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     NoticeRequestDTO.ice_write(ostr, iceP_request);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_sendNoticeForAccount =
    {
        com.maoding.common.zeroc.CustomException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NoticeServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NoticeServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NoticeServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NoticeServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NoticeServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NoticeServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, NoticeServicePrx.class, _NoticeServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default NoticeServicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (NoticeServicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default NoticeServicePrx ice_adapterId(String newAdapterId)
    {
        return (NoticeServicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default NoticeServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (NoticeServicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default NoticeServicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (NoticeServicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default NoticeServicePrx ice_invocationTimeout(int newTimeout)
    {
        return (NoticeServicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default NoticeServicePrx ice_connectionCached(boolean newCache)
    {
        return (NoticeServicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default NoticeServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (NoticeServicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default NoticeServicePrx ice_secure(boolean b)
    {
        return (NoticeServicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default NoticeServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (NoticeServicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default NoticeServicePrx ice_preferSecure(boolean b)
    {
        return (NoticeServicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default NoticeServicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (NoticeServicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default NoticeServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (NoticeServicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default NoticeServicePrx ice_collocationOptimized(boolean b)
    {
        return (NoticeServicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default NoticeServicePrx ice_twoway()
    {
        return (NoticeServicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default NoticeServicePrx ice_oneway()
    {
        return (NoticeServicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default NoticeServicePrx ice_batchOneway()
    {
        return (NoticeServicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default NoticeServicePrx ice_datagram()
    {
        return (NoticeServicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default NoticeServicePrx ice_batchDatagram()
    {
        return (NoticeServicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default NoticeServicePrx ice_compress(boolean co)
    {
        return (NoticeServicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default NoticeServicePrx ice_timeout(int t)
    {
        return (NoticeServicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default NoticeServicePrx ice_connectionId(String connectionId)
    {
        return (NoticeServicePrx)_ice_connectionId(connectionId);
    }

    static String ice_staticId()
    {
        return "::zeroc::NoticeService";
    }
}
