// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServerData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.fileServer.zeroc;

/**
 **/
@Deprecated
public class CallbackDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public String url;

    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }

    public String name;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public java.util.Map<java.lang.String, java.lang.String> params;

    public java.util.Map<java.lang.String, java.lang.String> getParams()
    {
        return params;
    }

    public void setParams(java.util.Map<java.lang.String, java.lang.String> params)
    {
        this.params = params;
    }

    public CallbackDTO()
    {
        this.url = "";
        this.name = "";
    }

    public CallbackDTO(String url, String name, java.util.Map<java.lang.String, java.lang.String> params)
    {
        this.url = url;
        this.name = name;
        this.params = params;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CallbackDTO r = null;
        if(rhs instanceof CallbackDTO)
        {
            r = (CallbackDTO)rhs;
        }

        if(r != null)
        {
            if(this.url != r.url)
            {
                if(this.url == null || r.url == null || !this.url.equals(r.url))
                {
                    return false;
                }
            }
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.params != r.params)
            {
                if(this.params == null || r.params == null || !this.params.equals(r.params))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::CallbackDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, url);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, params);
        return h_;
    }

    public CallbackDTO clone()
    {
        CallbackDTO c = null;
        try
        {
            c = (CallbackDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.url);
        ostr.writeString(this.name);
        com.maoding.common.zeroc.MapHelper.write(ostr, this.params);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.url = istr.readString();
        this.name = istr.readString();
        this.params = com.maoding.common.zeroc.MapHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CallbackDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CallbackDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        CallbackDTO v = new CallbackDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CallbackDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CallbackDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CallbackDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CallbackDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CallbackDTO _nullMarshalValue = new CallbackDTO();

    public static final long serialVersionUID = -1090451893L;
}
