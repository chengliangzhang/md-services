// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.common.zeroc;

public interface CommonService extends com.zeroc.Ice.Object
{
    ConstServicePrx getDefaultConstService(com.zeroc.Ice.Current current)
        throws CustomException;

    com.maoding.storage.zeroc.StorageServicePrx getDefaultStorageService(com.zeroc.Ice.Current current)
        throws CustomException;

    com.maoding.fileServer.zeroc.FileServicePrx getDefaultFileService(com.zeroc.Ice.Current current)
        throws CustomException;

    com.maoding.user.zeroc.UserServicePrx getDefaultUserService(com.zeroc.Ice.Current current)
        throws CustomException;

    com.maoding.notice.zeroc.NoticeServicePrx getDefaultNoticeService(com.zeroc.Ice.Current current)
        throws CustomException;

    void updateService(com.zeroc.Ice.Current current)
        throws CustomException;

    VersionDTO getNewestClient(com.zeroc.Ice.Current current)
        throws CustomException;

    long getVersionLength(VersionDTO version, com.zeroc.Ice.Current current)
        throws CustomException;

    com.maoding.fileServer.zeroc.FileDataDTO readVersion(VersionDTO version, long pos, int size, com.zeroc.Ice.Current current)
        throws CustomException;

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::CommonService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::CommonService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultConstService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        ConstServicePrx ret = obj.getDefaultConstService(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultStorageService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        com.maoding.storage.zeroc.StorageServicePrx ret = obj.getDefaultStorageService(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultFileService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        com.maoding.fileServer.zeroc.FileServicePrx ret = obj.getDefaultFileService(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultUserService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        com.maoding.user.zeroc.UserServicePrx ret = obj.getDefaultUserService(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultNoticeService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        com.maoding.notice.zeroc.NoticeServicePrx ret = obj.getDefaultNoticeService(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateService(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.updateService(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNewestClient(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        VersionDTO ret = obj.getNewestClient(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        VersionDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVersionLength(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        VersionDTO iceP_version;
        iceP_version = VersionDTO.ice_read(istr);
        inS.endReadParams();
        long ret = obj.getVersionLength(iceP_version, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_readVersion(CommonService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        VersionDTO iceP_version;
        long iceP_pos;
        int iceP_size;
        iceP_version = VersionDTO.ice_read(istr);
        iceP_pos = istr.readLong();
        iceP_size = istr.readInt();
        inS.endReadParams();
        com.maoding.fileServer.zeroc.FileDataDTO ret = obj.readVersion(iceP_version, iceP_pos, iceP_size, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.fileServer.zeroc.FileDataDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "getDefaultConstService",
        "getDefaultFileService",
        "getDefaultNoticeService",
        "getDefaultStorageService",
        "getDefaultUserService",
        "getNewestClient",
        "getVersionLength",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "readVersion",
        "updateService"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getDefaultConstService(this, in, current);
            }
            case 1:
            {
                return _iceD_getDefaultFileService(this, in, current);
            }
            case 2:
            {
                return _iceD_getDefaultNoticeService(this, in, current);
            }
            case 3:
            {
                return _iceD_getDefaultStorageService(this, in, current);
            }
            case 4:
            {
                return _iceD_getDefaultUserService(this, in, current);
            }
            case 5:
            {
                return _iceD_getNewestClient(this, in, current);
            }
            case 6:
            {
                return _iceD_getVersionLength(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 11:
            {
                return _iceD_readVersion(this, in, current);
            }
            case 12:
            {
                return _iceD_updateService(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
