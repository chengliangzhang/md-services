// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `CommonData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.common.zeroc;

public class PageQueryDTO implements java.lang.Cloneable,
                                     java.io.Serializable
{
    public int pageIndex;

    public int getPageIndex()
    {
        return pageIndex;
    }

    public void setPageIndex(int pageIndex)
    {
        this.pageIndex = pageIndex;
    }

    public int pageSize;

    public int getPageSize()
    {
        return pageSize;
    }

    public void setPageSize(int pageSize)
    {
        this.pageSize = pageSize;
    }

    public PageQueryDTO()
    {
    }

    public PageQueryDTO(int pageIndex, int pageSize)
    {
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PageQueryDTO r = null;
        if(rhs instanceof PageQueryDTO)
        {
            r = (PageQueryDTO)rhs;
        }

        if(r != null)
        {
            if(this.pageIndex != r.pageIndex)
            {
                return false;
            }
            if(this.pageSize != r.pageSize)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::PageQueryDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pageIndex);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pageSize);
        return h_;
    }

    public PageQueryDTO clone()
    {
        PageQueryDTO c = null;
        try
        {
            c = (PageQueryDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.pageIndex);
        ostr.writeInt(this.pageSize);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.pageIndex = istr.readInt();
        this.pageSize = istr.readInt();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, PageQueryDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public PageQueryDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        PageQueryDTO v = new PageQueryDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<PageQueryDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, PageQueryDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(8);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<PageQueryDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(PageQueryDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final PageQueryDTO _nullMarshalValue = new PageQueryDTO();

    public static final long serialVersionUID = -685887049L;
}
