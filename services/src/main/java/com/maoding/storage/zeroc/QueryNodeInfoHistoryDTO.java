// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class QueryNodeInfoHistoryDTO implements java.lang.Cloneable,
                                                java.io.Serializable
{
    public long historyStartTimeStamp;

    public long getHistoryStartTimeStamp()
    {
        return historyStartTimeStamp;
    }

    public void setHistoryStartTimeStamp(long historyStartTimeStamp)
    {
        this.historyStartTimeStamp = historyStartTimeStamp;
    }

    public long historyEndTimeStamp;

    public long getHistoryEndTimeStamp()
    {
        return historyEndTimeStamp;
    }

    public void setHistoryEndTimeStamp(long historyEndTimeStamp)
    {
        this.historyEndTimeStamp = historyEndTimeStamp;
    }

    public QueryNodeInfoHistoryDTO()
    {
    }

    public QueryNodeInfoHistoryDTO(long historyStartTimeStamp, long historyEndTimeStamp)
    {
        this.historyStartTimeStamp = historyStartTimeStamp;
        this.historyEndTimeStamp = historyEndTimeStamp;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        QueryNodeInfoHistoryDTO r = null;
        if(rhs instanceof QueryNodeInfoHistoryDTO)
        {
            r = (QueryNodeInfoHistoryDTO)rhs;
        }

        if(r != null)
        {
            if(this.historyStartTimeStamp != r.historyStartTimeStamp)
            {
                return false;
            }
            if(this.historyEndTimeStamp != r.historyEndTimeStamp)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::QueryNodeInfoHistoryDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, historyStartTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, historyEndTimeStamp);
        return h_;
    }

    public QueryNodeInfoHistoryDTO clone()
    {
        QueryNodeInfoHistoryDTO c = null;
        try
        {
            c = (QueryNodeInfoHistoryDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeLong(this.historyStartTimeStamp);
        ostr.writeLong(this.historyEndTimeStamp);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.historyStartTimeStamp = istr.readLong();
        this.historyEndTimeStamp = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, QueryNodeInfoHistoryDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public QueryNodeInfoHistoryDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        QueryNodeInfoHistoryDTO v = new QueryNodeInfoHistoryDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<QueryNodeInfoHistoryDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, QueryNodeInfoHistoryDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(16);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<QueryNodeInfoHistoryDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(QueryNodeInfoHistoryDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final QueryNodeInfoHistoryDTO _nullMarshalValue = new QueryNodeInfoHistoryDTO();

    public static final long serialVersionUID = -1007485252L;
}
