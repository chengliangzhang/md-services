// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class UpdateNodeDTO implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public String nodeName;

    public String getNodeName()
    {
        return nodeName;
    }

    public void setNodeName(String nodeName)
    {
        this.nodeName = nodeName;
    }

    public String pid;

    public String getPid()
    {
        return pid;
    }

    public void setPid(String pid)
    {
        this.pid = pid;
    }

    public String path;

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    public String typeId;

    public String getTypeId()
    {
        return typeId;
    }

    public void setTypeId(String typeId)
    {
        this.typeId = typeId;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public String projectId;

    public String getProjectId()
    {
        return projectId;
    }

    public void setProjectId(String projectId)
    {
        this.projectId = projectId;
    }

    public String fileLength;

    public String getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(String fileLength)
    {
        this.fileLength = fileLength;
    }

    public String fileMd5;

    public String getFileMd5()
    {
        return fileMd5;
    }

    public void setFileMd5(String fileMd5)
    {
        this.fileMd5 = fileMd5;
    }

    public UpdateNodeFileDTO updateFileRequest;

    public UpdateNodeFileDTO getUpdateFileRequest()
    {
        return updateFileRequest;
    }

    public void setUpdateFileRequest(UpdateNodeFileDTO updateFileRequest)
    {
        this.updateFileRequest = updateFileRequest;
    }

    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String baseDir;

    public String getBaseDir()
    {
        return baseDir;
    }

    public void setBaseDir(String baseDir)
    {
        this.baseDir = baseDir;
    }

    public String fileTypeId;

    public String getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(String fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String majorTypeId;

    public String getMajorTypeId()
    {
        return majorTypeId;
    }

    public void setMajorTypeId(String majorTypeId)
    {
        this.majorTypeId = majorTypeId;
    }

    public String readOnlyKey;

    public String getReadOnlyKey()
    {
        return readOnlyKey;
    }

    public void setReadOnlyKey(String readOnlyKey)
    {
        this.readOnlyKey = readOnlyKey;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public String statusAttr;

    public String getStatusAttr()
    {
        return statusAttr;
    }

    public void setStatusAttr(String statusAttr)
    {
        this.statusAttr = statusAttr;
    }

    public String passDesign;

    public String getPassDesign()
    {
        return passDesign;
    }

    public void setPassDesign(String passDesign)
    {
        this.passDesign = passDesign;
    }

    public String passCheck;

    public String getPassCheck()
    {
        return passCheck;
    }

    public void setPassCheck(String passCheck)
    {
        this.passCheck = passCheck;
    }

    public String passAudit;

    public String getPassAudit()
    {
        return passAudit;
    }

    public void setPassAudit(String passAudit)
    {
        this.passAudit = passAudit;
    }

    public String actionTypeId;

    public String getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(String actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public String lastModifyUserId;

    public String getLastModifyUserId()
    {
        return lastModifyUserId;
    }

    public void setLastModifyUserId(String lastModifyUserId)
    {
        this.lastModifyUserId = lastModifyUserId;
    }

    public String lastModifyRoleId;

    public String getLastModifyRoleId()
    {
        return lastModifyRoleId;
    }

    public void setLastModifyRoleId(String lastModifyRoleId)
    {
        this.lastModifyRoleId = lastModifyRoleId;
    }

    /**
     **/
    @Deprecated
    public String isPassDesign;

    /**
     **/
    @Deprecated
    public String getIsPassDesign()
    {
        return isPassDesign;
    }

    /**
     **/
    @Deprecated
    public void setIsPassDesign(String isPassDesign)
    {
        this.isPassDesign = isPassDesign;
    }

    /**
     **/
    @Deprecated
    public String isPassCheck;

    /**
     **/
    @Deprecated
    public String getIsPassCheck()
    {
        return isPassCheck;
    }

    /**
     **/
    @Deprecated
    public void setIsPassCheck(String isPassCheck)
    {
        this.isPassCheck = isPassCheck;
    }

    /**
     **/
    @Deprecated
    public String isPassAudit;

    /**
     **/
    @Deprecated
    public String getIsPassAudit()
    {
        return isPassAudit;
    }

    /**
     **/
    @Deprecated
    public void setIsPassAudit(String isPassAudit)
    {
        this.isPassAudit = isPassAudit;
    }

    /**
     **/
    @Deprecated
    public String mirrorTypeId;

    /**
     **/
    @Deprecated
    public String getMirrorTypeId()
    {
        return mirrorTypeId;
    }

    /**
     **/
    @Deprecated
    public void setMirrorTypeId(String mirrorTypeId)
    {
        this.mirrorTypeId = mirrorTypeId;
    }

    /**
     **/
    @Deprecated
    public String mirrorAddress;

    /**
     **/
    @Deprecated
    public String getMirrorAddress()
    {
        return mirrorAddress;
    }

    /**
     **/
    @Deprecated
    public void setMirrorAddress(String mirrorAddress)
    {
        this.mirrorAddress = mirrorAddress;
    }

    /**
     **/
    @Deprecated
    public String mirrorBaseDir;

    /**
     **/
    @Deprecated
    public String getMirrorBaseDir()
    {
        return mirrorBaseDir;
    }

    /**
     **/
    @Deprecated
    public void setMirrorBaseDir(String mirrorBaseDir)
    {
        this.mirrorBaseDir = mirrorBaseDir;
    }

    /**
     **/
    @Deprecated
    public String readOnlyMirrorKey;

    /**
     **/
    @Deprecated
    public String getReadOnlyMirrorKey()
    {
        return readOnlyMirrorKey;
    }

    /**
     **/
    @Deprecated
    public void setReadOnlyMirrorKey(String readOnlyMirrorKey)
    {
        this.readOnlyMirrorKey = readOnlyMirrorKey;
    }

    /**
     **/
    @Deprecated
    public String writableMirrorKey;

    /**
     **/
    @Deprecated
    public String getWritableMirrorKey()
    {
        return writableMirrorKey;
    }

    /**
     **/
    @Deprecated
    public void setWritableMirrorKey(String writableMirrorKey)
    {
        this.writableMirrorKey = writableMirrorKey;
    }

    public UpdateNodeDTO()
    {
        this.nodeName = "";
        this.pid = "";
        this.path = "";
        this.typeId = "";
        this.ownerUserId = "";
        this.taskId = "";
        this.projectId = "";
        this.fileLength = "";
        this.fileMd5 = "";
        this.updateFileRequest = new UpdateNodeFileDTO();
        this.serverTypeId = "";
        this.serverAddress = "";
        this.baseDir = "";
        this.fileTypeId = "";
        this.fileVersion = "";
        this.majorTypeId = "";
        this.readOnlyKey = "";
        this.writableKey = "";
        this.mainFileId = "";
        this.statusAttr = "";
        this.passDesign = "";
        this.passCheck = "";
        this.passAudit = "";
        this.actionTypeId = "";
        this.remark = "";
        this.lastModifyUserId = "";
        this.lastModifyRoleId = "";
        this.isPassDesign = "";
        this.isPassCheck = "";
        this.isPassAudit = "";
        this.mirrorTypeId = "";
        this.mirrorAddress = "";
        this.mirrorBaseDir = "";
        this.readOnlyMirrorKey = "";
        this.writableMirrorKey = "";
    }

    public UpdateNodeDTO(String nodeName, String pid, String path, String typeId, String ownerUserId, String taskId, String projectId, String fileLength, String fileMd5, UpdateNodeFileDTO updateFileRequest, String serverTypeId, String serverAddress, String baseDir, String fileTypeId, String fileVersion, String majorTypeId, String readOnlyKey, String writableKey, String mainFileId, String statusAttr, String passDesign, String passCheck, String passAudit, String actionTypeId, String remark, String lastModifyUserId, String lastModifyRoleId, String isPassDesign, String isPassCheck, String isPassAudit, String mirrorTypeId, String mirrorAddress, String mirrorBaseDir, String readOnlyMirrorKey, String writableMirrorKey)
    {
        this.nodeName = nodeName;
        this.pid = pid;
        this.path = path;
        this.typeId = typeId;
        this.ownerUserId = ownerUserId;
        this.taskId = taskId;
        this.projectId = projectId;
        this.fileLength = fileLength;
        this.fileMd5 = fileMd5;
        this.updateFileRequest = updateFileRequest;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.baseDir = baseDir;
        this.fileTypeId = fileTypeId;
        this.fileVersion = fileVersion;
        this.majorTypeId = majorTypeId;
        this.readOnlyKey = readOnlyKey;
        this.writableKey = writableKey;
        this.mainFileId = mainFileId;
        this.statusAttr = statusAttr;
        this.passDesign = passDesign;
        this.passCheck = passCheck;
        this.passAudit = passAudit;
        this.actionTypeId = actionTypeId;
        this.remark = remark;
        this.lastModifyUserId = lastModifyUserId;
        this.lastModifyRoleId = lastModifyRoleId;
        this.isPassDesign = isPassDesign;
        this.isPassCheck = isPassCheck;
        this.isPassAudit = isPassAudit;
        this.mirrorTypeId = mirrorTypeId;
        this.mirrorAddress = mirrorAddress;
        this.mirrorBaseDir = mirrorBaseDir;
        this.readOnlyMirrorKey = readOnlyMirrorKey;
        this.writableMirrorKey = writableMirrorKey;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpdateNodeDTO r = null;
        if(rhs instanceof UpdateNodeDTO)
        {
            r = (UpdateNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.nodeName != r.nodeName)
            {
                if(this.nodeName == null || r.nodeName == null || !this.nodeName.equals(r.nodeName))
                {
                    return false;
                }
            }
            if(this.pid != r.pid)
            {
                if(this.pid == null || r.pid == null || !this.pid.equals(r.pid))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.typeId != r.typeId)
            {
                if(this.typeId == null || r.typeId == null || !this.typeId.equals(r.typeId))
                {
                    return false;
                }
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }
            if(this.projectId != r.projectId)
            {
                if(this.projectId == null || r.projectId == null || !this.projectId.equals(r.projectId))
                {
                    return false;
                }
            }
            if(this.fileLength != r.fileLength)
            {
                if(this.fileLength == null || r.fileLength == null || !this.fileLength.equals(r.fileLength))
                {
                    return false;
                }
            }
            if(this.fileMd5 != r.fileMd5)
            {
                if(this.fileMd5 == null || r.fileMd5 == null || !this.fileMd5.equals(r.fileMd5))
                {
                    return false;
                }
            }
            if(this.updateFileRequest != r.updateFileRequest)
            {
                if(this.updateFileRequest == null || r.updateFileRequest == null || !this.updateFileRequest.equals(r.updateFileRequest))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.baseDir != r.baseDir)
            {
                if(this.baseDir == null || r.baseDir == null || !this.baseDir.equals(r.baseDir))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                if(this.fileTypeId == null || r.fileTypeId == null || !this.fileTypeId.equals(r.fileTypeId))
                {
                    return false;
                }
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.majorTypeId != r.majorTypeId)
            {
                if(this.majorTypeId == null || r.majorTypeId == null || !this.majorTypeId.equals(r.majorTypeId))
                {
                    return false;
                }
            }
            if(this.readOnlyKey != r.readOnlyKey)
            {
                if(this.readOnlyKey == null || r.readOnlyKey == null || !this.readOnlyKey.equals(r.readOnlyKey))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.statusAttr != r.statusAttr)
            {
                if(this.statusAttr == null || r.statusAttr == null || !this.statusAttr.equals(r.statusAttr))
                {
                    return false;
                }
            }
            if(this.passDesign != r.passDesign)
            {
                if(this.passDesign == null || r.passDesign == null || !this.passDesign.equals(r.passDesign))
                {
                    return false;
                }
            }
            if(this.passCheck != r.passCheck)
            {
                if(this.passCheck == null || r.passCheck == null || !this.passCheck.equals(r.passCheck))
                {
                    return false;
                }
            }
            if(this.passAudit != r.passAudit)
            {
                if(this.passAudit == null || r.passAudit == null || !this.passAudit.equals(r.passAudit))
                {
                    return false;
                }
            }
            if(this.actionTypeId != r.actionTypeId)
            {
                if(this.actionTypeId == null || r.actionTypeId == null || !this.actionTypeId.equals(r.actionTypeId))
                {
                    return false;
                }
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }
            if(this.lastModifyUserId != r.lastModifyUserId)
            {
                if(this.lastModifyUserId == null || r.lastModifyUserId == null || !this.lastModifyUserId.equals(r.lastModifyUserId))
                {
                    return false;
                }
            }
            if(this.lastModifyRoleId != r.lastModifyRoleId)
            {
                if(this.lastModifyRoleId == null || r.lastModifyRoleId == null || !this.lastModifyRoleId.equals(r.lastModifyRoleId))
                {
                    return false;
                }
            }
            if(this.isPassDesign != r.isPassDesign)
            {
                if(this.isPassDesign == null || r.isPassDesign == null || !this.isPassDesign.equals(r.isPassDesign))
                {
                    return false;
                }
            }
            if(this.isPassCheck != r.isPassCheck)
            {
                if(this.isPassCheck == null || r.isPassCheck == null || !this.isPassCheck.equals(r.isPassCheck))
                {
                    return false;
                }
            }
            if(this.isPassAudit != r.isPassAudit)
            {
                if(this.isPassAudit == null || r.isPassAudit == null || !this.isPassAudit.equals(r.isPassAudit))
                {
                    return false;
                }
            }
            if(this.mirrorTypeId != r.mirrorTypeId)
            {
                if(this.mirrorTypeId == null || r.mirrorTypeId == null || !this.mirrorTypeId.equals(r.mirrorTypeId))
                {
                    return false;
                }
            }
            if(this.mirrorAddress != r.mirrorAddress)
            {
                if(this.mirrorAddress == null || r.mirrorAddress == null || !this.mirrorAddress.equals(r.mirrorAddress))
                {
                    return false;
                }
            }
            if(this.mirrorBaseDir != r.mirrorBaseDir)
            {
                if(this.mirrorBaseDir == null || r.mirrorBaseDir == null || !this.mirrorBaseDir.equals(r.mirrorBaseDir))
                {
                    return false;
                }
            }
            if(this.readOnlyMirrorKey != r.readOnlyMirrorKey)
            {
                if(this.readOnlyMirrorKey == null || r.readOnlyMirrorKey == null || !this.readOnlyMirrorKey.equals(r.readOnlyMirrorKey))
                {
                    return false;
                }
            }
            if(this.writableMirrorKey != r.writableMirrorKey)
            {
                if(this.writableMirrorKey == null || r.writableMirrorKey == null || !this.writableMirrorKey.equals(r.writableMirrorKey))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UpdateNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nodeName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, projectId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, updateFileRequest);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, statusAttr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyRoleId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorBaseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorKey);
        return h_;
    }

    public UpdateNodeDTO clone()
    {
        UpdateNodeDTO c = null;
        try
        {
            c = (UpdateNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.nodeName);
        ostr.writeString(this.pid);
        ostr.writeString(this.path);
        ostr.writeString(this.typeId);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.taskId);
        ostr.writeString(this.projectId);
        ostr.writeString(this.fileLength);
        ostr.writeString(this.fileMd5);
        UpdateNodeFileDTO.ice_write(ostr, this.updateFileRequest);
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.baseDir);
        ostr.writeString(this.fileTypeId);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.majorTypeId);
        ostr.writeString(this.readOnlyKey);
        ostr.writeString(this.writableKey);
        ostr.writeString(this.mainFileId);
        ostr.writeString(this.statusAttr);
        ostr.writeString(this.passDesign);
        ostr.writeString(this.passCheck);
        ostr.writeString(this.passAudit);
        ostr.writeString(this.actionTypeId);
        ostr.writeString(this.remark);
        ostr.writeString(this.lastModifyUserId);
        ostr.writeString(this.lastModifyRoleId);
        ostr.writeString(this.isPassDesign);
        ostr.writeString(this.isPassCheck);
        ostr.writeString(this.isPassAudit);
        ostr.writeString(this.mirrorTypeId);
        ostr.writeString(this.mirrorAddress);
        ostr.writeString(this.mirrorBaseDir);
        ostr.writeString(this.readOnlyMirrorKey);
        ostr.writeString(this.writableMirrorKey);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.nodeName = istr.readString();
        this.pid = istr.readString();
        this.path = istr.readString();
        this.typeId = istr.readString();
        this.ownerUserId = istr.readString();
        this.taskId = istr.readString();
        this.projectId = istr.readString();
        this.fileLength = istr.readString();
        this.fileMd5 = istr.readString();
        this.updateFileRequest = UpdateNodeFileDTO.ice_read(istr);
        this.serverTypeId = istr.readString();
        this.serverAddress = istr.readString();
        this.baseDir = istr.readString();
        this.fileTypeId = istr.readString();
        this.fileVersion = istr.readString();
        this.majorTypeId = istr.readString();
        this.readOnlyKey = istr.readString();
        this.writableKey = istr.readString();
        this.mainFileId = istr.readString();
        this.statusAttr = istr.readString();
        this.passDesign = istr.readString();
        this.passCheck = istr.readString();
        this.passAudit = istr.readString();
        this.actionTypeId = istr.readString();
        this.remark = istr.readString();
        this.lastModifyUserId = istr.readString();
        this.lastModifyRoleId = istr.readString();
        this.isPassDesign = istr.readString();
        this.isPassCheck = istr.readString();
        this.isPassAudit = istr.readString();
        this.mirrorTypeId = istr.readString();
        this.mirrorAddress = istr.readString();
        this.mirrorBaseDir = istr.readString();
        this.readOnlyMirrorKey = istr.readString();
        this.writableMirrorKey = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpdateNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpdateNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpdateNodeDTO v = new UpdateNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpdateNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpdateNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpdateNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpdateNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpdateNodeDTO _nullMarshalValue = new UpdateNodeDTO();

    public static final long serialVersionUID = -751236757L;
}
