// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServerData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.fileServer.zeroc;

public class CommitRequestDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public String actionTypeId;

    public String getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(String actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String pid;

    public String getPid()
    {
        return pid;
    }

    public void setPid(String pid)
    {
        this.pid = pid;
    }

    /**
     **/
    @Deprecated
    public String path;

    /**
     **/
    @Deprecated
    public String getPath()
    {
        return path;
    }

    /**
     **/
    @Deprecated
    public void setPath(String path)
    {
        this.path = path;
    }

    /**
     **/
    @Deprecated
    public String userId;

    /**
     **/
    @Deprecated
    public String getUserId()
    {
        return userId;
    }

    /**
     **/
    @Deprecated
    public void setUserId(String userId)
    {
        this.userId = userId;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String majorId;

    public String getMajorId()
    {
        return majorId;
    }

    public void setMajorId(String majorId)
    {
        this.majorId = majorId;
    }

    public String majorName;

    public String getMajorName()
    {
        return majorName;
    }

    public void setMajorName(String majorName)
    {
        this.majorName = majorName;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String baseDir;

    public String getBaseDir()
    {
        return baseDir;
    }

    public void setBaseDir(String baseDir)
    {
        this.baseDir = baseDir;
    }

    public boolean isPassDesign;

    public boolean getIsPassDesign()
    {
        return isPassDesign;
    }

    public void setIsPassDesign(boolean isPassDesign)
    {
        this.isPassDesign = isPassDesign;
    }

    public boolean isIsPassDesign()
    {
        return isPassDesign;
    }

    public boolean isPassCheck;

    public boolean getIsPassCheck()
    {
        return isPassCheck;
    }

    public void setIsPassCheck(boolean isPassCheck)
    {
        this.isPassCheck = isPassCheck;
    }

    public boolean isIsPassCheck()
    {
        return isPassCheck;
    }

    public boolean isPassAudit;

    public boolean getIsPassAudit()
    {
        return isPassAudit;
    }

    public void setIsPassAudit(boolean isPassAudit)
    {
        this.isPassAudit = isPassAudit;
    }

    public boolean isIsPassAudit()
    {
        return isPassAudit;
    }

    public CommitRequestDTO()
    {
        this.actionTypeId = "";
        this.pid = "";
        this.path = "";
        this.userId = "";
        this.ownerUserId = "";
        this.fileVersion = "";
        this.majorId = "";
        this.majorName = "";
        this.remark = "";
        this.serverTypeId = "";
        this.serverAddress = "";
        this.baseDir = "";
    }

    public CommitRequestDTO(String actionTypeId, String pid, String path, String userId, String ownerUserId, String fileVersion, String majorId, String majorName, String remark, String serverTypeId, String serverAddress, String baseDir, boolean isPassDesign, boolean isPassCheck, boolean isPassAudit)
    {
        this.actionTypeId = actionTypeId;
        this.pid = pid;
        this.path = path;
        this.userId = userId;
        this.ownerUserId = ownerUserId;
        this.fileVersion = fileVersion;
        this.majorId = majorId;
        this.majorName = majorName;
        this.remark = remark;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.baseDir = baseDir;
        this.isPassDesign = isPassDesign;
        this.isPassCheck = isPassCheck;
        this.isPassAudit = isPassAudit;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CommitRequestDTO r = null;
        if(rhs instanceof CommitRequestDTO)
        {
            r = (CommitRequestDTO)rhs;
        }

        if(r != null)
        {
            if(this.actionTypeId != r.actionTypeId)
            {
                if(this.actionTypeId == null || r.actionTypeId == null || !this.actionTypeId.equals(r.actionTypeId))
                {
                    return false;
                }
            }
            if(this.pid != r.pid)
            {
                if(this.pid == null || r.pid == null || !this.pid.equals(r.pid))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.userId != r.userId)
            {
                if(this.userId == null || r.userId == null || !this.userId.equals(r.userId))
                {
                    return false;
                }
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.majorId != r.majorId)
            {
                if(this.majorId == null || r.majorId == null || !this.majorId.equals(r.majorId))
                {
                    return false;
                }
            }
            if(this.majorName != r.majorName)
            {
                if(this.majorName == null || r.majorName == null || !this.majorName.equals(r.majorName))
                {
                    return false;
                }
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.baseDir != r.baseDir)
            {
                if(this.baseDir == null || r.baseDir == null || !this.baseDir.equals(r.baseDir))
                {
                    return false;
                }
            }
            if(this.isPassDesign != r.isPassDesign)
            {
                return false;
            }
            if(this.isPassCheck != r.isPassCheck)
            {
                return false;
            }
            if(this.isPassAudit != r.isPassAudit)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::CommitRequestDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, userId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassAudit);
        return h_;
    }

    public CommitRequestDTO clone()
    {
        CommitRequestDTO c = null;
        try
        {
            c = (CommitRequestDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.actionTypeId);
        ostr.writeString(this.pid);
        ostr.writeString(this.path);
        ostr.writeString(this.userId);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.majorId);
        ostr.writeString(this.majorName);
        ostr.writeString(this.remark);
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.baseDir);
        ostr.writeBool(this.isPassDesign);
        ostr.writeBool(this.isPassCheck);
        ostr.writeBool(this.isPassAudit);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.actionTypeId = istr.readString();
        this.pid = istr.readString();
        this.path = istr.readString();
        this.userId = istr.readString();
        this.ownerUserId = istr.readString();
        this.fileVersion = istr.readString();
        this.majorId = istr.readString();
        this.majorName = istr.readString();
        this.remark = istr.readString();
        this.serverTypeId = istr.readString();
        this.serverAddress = istr.readString();
        this.baseDir = istr.readString();
        this.isPassDesign = istr.readBool();
        this.isPassCheck = istr.readBool();
        this.isPassAudit = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CommitRequestDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CommitRequestDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        CommitRequestDTO v = new CommitRequestDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CommitRequestDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CommitRequestDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CommitRequestDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CommitRequestDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CommitRequestDTO _nullMarshalValue = new CommitRequestDTO();

    public static final long serialVersionUID = 1638307431L;
}
