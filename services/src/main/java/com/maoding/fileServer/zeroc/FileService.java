// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.fileServer.zeroc;

public interface FileService extends com.zeroc.Ice.Object
{
    long getFileLength(com.maoding.storage.zeroc.NodeFileDTO file, boolean readOnly, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void setStorageService(com.maoding.storage.zeroc.StorageServicePrx storageService, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.common.zeroc.VersionDTO getNewestClient(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    long getVersionLength(com.maoding.common.zeroc.VersionDTO version, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    FileDataDTO readVersion(com.maoding.common.zeroc.VersionDTO version, long pos, int size, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void flushBuffer(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SummaryFileDTO summaryFile(QuerySummarySimpleDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void clearAll(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void clearKey(com.maoding.user.zeroc.AccountDTO account, String key, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.CANodeDTO> listDesignNode(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.CANodeDTO> listCANode(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO checkNodeListRequest(java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO checkNodeListRequestForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO checkNodeRequest(com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO checkNodeRequestForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO auditNodeListRequest(java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO auditNodeListRequestForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO auditNodeRequest(com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO auditNodeRequestForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO askCANodeListRequest(java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO askCANodeListRequestForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO askCANodeRequest(com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO askCANodeRequestForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO requestCommitListForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO requestCommitForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.CANodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO requestIssueListForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.CANodeDTO> srcList, com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO requestIssueForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.CANodeDTO src, com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    long getTime(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void restartWebRole(com.maoding.user.zeroc.WebRoleDTO webRole, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void finishWebRole(com.maoding.user.zeroc.WebRoleDTO webRole, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void setWebRoleStatus(com.maoding.user.zeroc.WebRoleDTO webRole, String statusId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.user.zeroc.WebRoleDTO getWebRole(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.user.zeroc.WebRoleDTO> listWebRoleTask(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.user.zeroc.WebRoleDTO> listAllWebRole(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.AnnotateDTO createAnnotateCheck(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, AnnotateRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.AnnotateDTO createAnnotateAudit(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, AnnotateRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.AnnotateDTO createAnnotate(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, AnnotateRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.AnnotateDTO updateAnnotate(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.AnnotateDTO annotate, AnnotateRequestDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.AnnotateDTO> listAnnotate(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.QueryAnnotateDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.NodeFileDTO addAccessory(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.AnnotateDTO annotate, AccessoryRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void deleteAccessory(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.AnnotateDTO annotate, com.maoding.storage.zeroc.NodeFileDTO accessory, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    String getNodePath(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    String getNodePathForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.HistoryDTO> listHistory(com.maoding.storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.HistoryDTO> listHistoryForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.NodeFileDTO getFileInfo(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.NodeFileDTO getFileInfoForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.NodeTextDTO getTextInfo(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.NodeTextDTO getTextInfoForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getFullNodeWithHis(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getFullNodeWithHisForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getFullNode(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getFullNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getNodeInfo(com.maoding.storage.zeroc.SimpleNodeDTO node, com.maoding.storage.zeroc.QueryNodeInfoDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.FullNodeDTO getNodeInfoForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO node, com.maoding.storage.zeroc.QueryNodeInfoDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.NodeFileDTO> listFile(com.maoding.user.zeroc.AccountDTO account, AskFileDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.NodeFileDTO> listValidFile(com.maoding.user.zeroc.AccountDTO account, AskValidFileDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listChildNode(com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listChildNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listChildrenNode(com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listChildrenNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listWebArchiveDir(String projectId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listWebArchiveDirForAccount(com.maoding.user.zeroc.AccountDTO account, String projectId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO changeNodeOwner(com.maoding.storage.zeroc.SimpleNodeDTO src, com.maoding.user.zeroc.UserDTO dstOwner, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO changeNodeOwnerForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, com.maoding.user.zeroc.UserDTO dstOwner, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean login(com.maoding.user.zeroc.LoginDTO loginInfo, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<java.lang.String> setNoticeClient(String userId, com.maoding.notice.zeroc.NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.common.zeroc.IdNameDTO> listMajor(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.common.zeroc.IdNameDTO> listMajorForAccount(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.common.zeroc.IdNameDTO> listAction(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.common.zeroc.IdNameDTO> listActionForAccount(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.user.zeroc.ProjectRoleDTO> listProjectRoleByProjectId(String projectId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.user.zeroc.ProjectRoleDTO> listProjectRoleByProjectIdForAccount(com.maoding.user.zeroc.AccountDTO account, String projectId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO issueNodeList(java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO issueNodeListForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO issueNode(com.maoding.storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO issueNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO commitNodeList(java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO commitNodeListForAccount(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO commitNode(com.maoding.storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO commitNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createVersion(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, String path, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO updateVersion(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, com.maoding.storage.zeroc.SimpleNodeDTO dst, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    CommitListResultDTO updateNodeList(com.maoding.user.zeroc.AccountDTO account, java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean deleteNode(com.maoding.storage.zeroc.SimpleNodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean deleteNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void setFileLength(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean setNodeLength(com.maoding.storage.zeroc.SimpleNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean setNodeLengthForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean setFullNodeLength(com.maoding.storage.zeroc.FullNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean setFullNodeLengthForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.FullNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void releaseFile(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean releaseNode(com.maoding.storage.zeroc.SimpleNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean releaseNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void reloadFile(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean reloadNode(com.maoding.storage.zeroc.SimpleNodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean reloadNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    int writeFile(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    int writeFileAndRelease(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, long fileLength, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    int writeAccessory(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, FileDataDTO data, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    int writeNode(com.maoding.storage.zeroc.SimpleNodeDTO src, FileDataDTO data, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    int writeNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, FileDataDTO data, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    FileDataDTO readFile(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.NodeFileDTO file, long pos, int size, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    FileDataDTO readNode(com.maoding.storage.zeroc.SimpleNodeDTO src, long pos, int size, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    FileDataDTO readNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, long pos, int size, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean isEmpty(com.maoding.storage.zeroc.SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean isExist(String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    boolean isExistForAccount(com.maoding.user.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO moveNode(com.maoding.storage.zeroc.SimpleNodeDTO src, com.maoding.storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO moveNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO src, com.maoding.storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createDirectory(com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createDirectoryForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createFile(com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createFileForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createNode(com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO createNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeById(String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeByIdForAccount(com.maoding.user.zeroc.AccountDTO account, String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeByPath(String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeByPathForAccount(com.maoding.user.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeByFuzzyPath(String fuzzyPath, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    com.maoding.storage.zeroc.SimpleNodeDTO getNodeByFuzzyPathForAccount(com.maoding.user.zeroc.AccountDTO account, String fuzzyPath, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listRootNode(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listRootNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listAllNode(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listAllNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listNode(com.maoding.storage.zeroc.QueryNodeDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> listNodeForAccount(com.maoding.user.zeroc.AccountDTO account, com.maoding.storage.zeroc.QueryNodeDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::FileService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::FileService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileLength(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        boolean iceP_readOnly;
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_readOnly = istr.readBool();
        inS.endReadParams();
        long ret = obj.getFileLength(iceP_file, iceP_readOnly, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setStorageService(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.StorageServicePrx iceP_storageService;
        iceP_storageService = com.maoding.storage.zeroc.StorageServicePrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.setStorageService(iceP_storageService, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNewestClient(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        com.maoding.common.zeroc.VersionDTO ret = obj.getNewestClient(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.VersionDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVersionLength(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.common.zeroc.VersionDTO iceP_version;
        iceP_version = com.maoding.common.zeroc.VersionDTO.ice_read(istr);
        inS.endReadParams();
        long ret = obj.getVersionLength(iceP_version, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_readVersion(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.common.zeroc.VersionDTO iceP_version;
        long iceP_pos;
        int iceP_size;
        iceP_version = com.maoding.common.zeroc.VersionDTO.ice_read(istr);
        iceP_pos = istr.readLong();
        iceP_size = istr.readInt();
        inS.endReadParams();
        FileDataDTO ret = obj.readVersion(iceP_version, iceP_pos, iceP_size, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileDataDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_flushBuffer(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.flushBuffer(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_summaryFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        QuerySummarySimpleDTO iceP_query;
        iceP_query = QuerySummarySimpleDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SummaryFileDTO ret = obj.summaryFile(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SummaryFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_clearAll(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        obj.clearAll(iceP_account, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_clearKey(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_key;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_key = istr.readString();
        inS.endReadParams();
        obj.clearKey(iceP_account, iceP_key, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listDesignNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> ret = obj.listDesignNode(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.CANodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listCANode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> ret = obj.listCANode(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.CANodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkNodeListRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.checkNodeListRequest(iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkNodeListRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.checkNodeListRequestForAccount(iceP_account, iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkNodeRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.checkNodeRequest(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkNodeRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.checkNodeRequestForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_auditNodeListRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.auditNodeListRequest(iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_auditNodeListRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.auditNodeListRequestForAccount(iceP_account, iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_auditNodeRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.auditNodeRequest(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_auditNodeRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.auditNodeRequestForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_askCANodeListRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.askCANodeListRequest(iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_askCANodeListRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.askCANodeListRequestForAccount(iceP_account, iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_askCANodeRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.askCANodeRequest(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_askCANodeRequestForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.askCANodeRequestForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestCommitListForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.requestCommitListForAccount(iceP_account, iceP_srcList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestCommitForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.requestCommitForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestIssueListForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.CANodeDTO> iceP_srcList;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.CANodeListHelper.read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.requestIssueListForAccount(iceP_account, iceP_srcList, iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestIssueForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.CANodeDTO iceP_src;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.CANodeDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.requestIssueForAccount(iceP_account, iceP_src, iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTime(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        long ret = obj.getTime(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_restartWebRole(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.WebRoleDTO iceP_webRole;
        iceP_webRole = com.maoding.user.zeroc.WebRoleDTO.ice_read(istr);
        inS.endReadParams();
        obj.restartWebRole(iceP_webRole, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_finishWebRole(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.WebRoleDTO iceP_webRole;
        iceP_webRole = com.maoding.user.zeroc.WebRoleDTO.ice_read(istr);
        inS.endReadParams();
        obj.finishWebRole(iceP_webRole, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setWebRoleStatus(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.WebRoleDTO iceP_webRole;
        String iceP_statusId;
        iceP_webRole = com.maoding.user.zeroc.WebRoleDTO.ice_read(istr);
        iceP_statusId = istr.readString();
        inS.endReadParams();
        obj.setWebRoleStatus(iceP_webRole, iceP_statusId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getWebRole(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.user.zeroc.WebRoleDTO ret = obj.getWebRole(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.user.zeroc.WebRoleDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listWebRoleTask(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.user.zeroc.WebRoleDTO> ret = obj.listWebRoleTask(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.user.zeroc.WebRoleListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAllWebRole(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.user.zeroc.WebRoleDTO> ret = obj.listAllWebRole(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.user.zeroc.WebRoleListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createAnnotateCheck(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        AnnotateRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = AnnotateRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.AnnotateDTO ret = obj.createAnnotateCheck(iceP_account, iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.AnnotateDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createAnnotateAudit(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        AnnotateRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = AnnotateRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.AnnotateDTO ret = obj.createAnnotateAudit(iceP_account, iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.AnnotateDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createAnnotate(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        AnnotateRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = AnnotateRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.AnnotateDTO ret = obj.createAnnotate(iceP_account, iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.AnnotateDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateAnnotate(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.AnnotateDTO iceP_annotate;
        AnnotateRequestDTO iceP_query;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_annotate = com.maoding.storage.zeroc.AnnotateDTO.ice_read(istr);
        iceP_query = AnnotateRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.AnnotateDTO ret = obj.updateAnnotate(iceP_account, iceP_annotate, iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.AnnotateDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAnnotate(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.QueryAnnotateDTO iceP_query;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_query = com.maoding.storage.zeroc.QueryAnnotateDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.AnnotateDTO> ret = obj.listAnnotate(iceP_account, iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.AnnotateListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addAccessory(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.AnnotateDTO iceP_annotate;
        AccessoryRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_annotate = com.maoding.storage.zeroc.AnnotateDTO.ice_read(istr);
        iceP_request = AccessoryRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.NodeFileDTO ret = obj.addAccessory(iceP_account, iceP_annotate, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteAccessory(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.AnnotateDTO iceP_annotate;
        com.maoding.storage.zeroc.NodeFileDTO iceP_accessory;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_annotate = com.maoding.storage.zeroc.AnnotateDTO.ice_read(istr);
        iceP_accessory = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        inS.endReadParams();
        obj.deleteAccessory(iceP_account, iceP_annotate, iceP_accessory, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodePath(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.getNodePath(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodePathForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.getNodePathForAccount(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listHistory(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        long iceP_startTime;
        long iceP_endTime;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_startTime = istr.readLong();
        iceP_endTime = istr.readLong();
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.HistoryDTO> ret = obj.listHistory(iceP_node, iceP_startTime, iceP_endTime, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.HistoryListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listHistoryForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        long iceP_startTime;
        long iceP_endTime;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_startTime = istr.readLong();
        iceP_endTime = istr.readLong();
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.HistoryDTO> ret = obj.listHistoryForAccount(iceP_account, iceP_node, iceP_startTime, iceP_endTime, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.HistoryListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileInfo(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.NodeFileDTO ret = obj.getFileInfo(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileInfoForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.NodeFileDTO ret = obj.getFileInfoForAccount(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTextInfo(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.NodeTextDTO ret = obj.getTextInfo(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeTextDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTextInfoForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.NodeTextDTO ret = obj.getTextInfoForAccount(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeTextDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNodeWithHis(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getFullNodeWithHis(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNodeWithHisForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getFullNodeWithHisForAccount(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getFullNode(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFullNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getFullNodeForAccount(iceP_account, iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeInfo(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        com.maoding.storage.zeroc.QueryNodeInfoDTO iceP_request;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = com.maoding.storage.zeroc.QueryNodeInfoDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getNodeInfo(iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeInfoForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        com.maoding.storage.zeroc.QueryNodeInfoDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = com.maoding.storage.zeroc.QueryNodeInfoDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.FullNodeDTO ret = obj.getNodeInfoForAccount(iceP_account, iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        AskFileDTO iceP_query;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_query = AskFileDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.NodeFileDTO> ret = obj.listFile(iceP_account, iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeFileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listValidFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        AskValidFileDTO iceP_query;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_query = AskValidFileDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.NodeFileDTO> ret = obj.listValidFile(iceP_account, iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.NodeFileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChildNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listChildNode(iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChildNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listChildNodeForAccount(iceP_account, iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChildrenNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listChildrenNode(iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChildrenNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listChildrenNodeForAccount(iceP_account, iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listWebArchiveDir(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_projectId;
        iceP_projectId = istr.readString();
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listWebArchiveDir(iceP_projectId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listWebArchiveDirForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_projectId;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_projectId = istr.readString();
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listWebArchiveDirForAccount(iceP_account, iceP_projectId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_changeNodeOwner(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        com.maoding.user.zeroc.UserDTO iceP_dstOwner;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_dstOwner = com.maoding.user.zeroc.UserDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.changeNodeOwner(iceP_src, iceP_dstOwner, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_changeNodeOwnerForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        com.maoding.user.zeroc.UserDTO iceP_dstOwner;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_dstOwner = com.maoding.user.zeroc.UserDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.changeNodeOwnerForAccount(iceP_account, iceP_src, iceP_dstOwner, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_login(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.LoginDTO iceP_loginInfo;
        iceP_loginInfo = com.maoding.user.zeroc.LoginDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.login(iceP_loginInfo, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setNoticeClient(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_userId;
        com.maoding.notice.zeroc.NoticeClientPrx iceP_client;
        iceP_userId = istr.readString();
        iceP_client = com.maoding.notice.zeroc.NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        java.util.List<java.lang.String> ret = obj.setNoticeClient(iceP_userId, iceP_client, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.StringListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listMajor(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<com.maoding.common.zeroc.IdNameDTO> ret = obj.listMajor(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.IdNameListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listMajorForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.common.zeroc.IdNameDTO> ret = obj.listMajorForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.IdNameListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAction(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<com.maoding.common.zeroc.IdNameDTO> ret = obj.listAction(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.IdNameListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listActionForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.common.zeroc.IdNameDTO> ret = obj.listActionForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.IdNameListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listProjectRoleByProjectId(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_projectId;
        iceP_projectId = istr.readString();
        inS.endReadParams();
        java.util.List<com.maoding.user.zeroc.ProjectRoleDTO> ret = obj.listProjectRoleByProjectId(iceP_projectId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.user.zeroc.ProjectRoleListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listProjectRoleByProjectIdForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_projectId;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_projectId = istr.readString();
        inS.endReadParams();
        java.util.List<com.maoding.user.zeroc.ProjectRoleDTO> ret = obj.listProjectRoleByProjectIdForAccount(iceP_account, iceP_projectId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.user.zeroc.ProjectRoleListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_issueNodeList(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> iceP_srcList;
        CommitRequestDTO iceP_request;
        iceP_srcList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.issueNodeList(iceP_srcList, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_issueNodeListForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> iceP_srcList;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.issueNodeListForAccount(iceP_account, iceP_srcList, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_issueNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        CommitRequestDTO iceP_request;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.issueNode(iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_issueNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.issueNodeForAccount(iceP_account, iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_commitNodeList(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> iceP_srcList;
        CommitRequestDTO iceP_request;
        iceP_srcList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.commitNodeList(iceP_srcList, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_commitNodeListForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> iceP_srcList;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.commitNodeListForAccount(iceP_account, iceP_srcList, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_commitNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        CommitRequestDTO iceP_request;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.commitNode(iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_commitNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.commitNodeForAccount(iceP_account, iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createVersion(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        String iceP_path;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_path = istr.readString();
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createVersion(iceP_account, iceP_src, iceP_path, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateVersion(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_dst;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_dst = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.updateVersion(iceP_account, iceP_src, iceP_dst, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateNodeList(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> iceP_srcList;
        CommitRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_srcList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        iceP_request = CommitRequestDTO.ice_read(istr);
        inS.endReadParams();
        CommitListResultDTO ret = obj.updateNodeList(iceP_account, iceP_srcList, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CommitListResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.deleteNode(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.deleteNodeForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFileLength(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        long iceP_fileLength;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        obj.setFileLength(iceP_account, iceP_file, iceP_fileLength, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setNodeLength(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.setNodeLength(iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setNodeLengthForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.setNodeLengthForAccount(iceP_account, iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFullNodeLength(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.FullNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_src = com.maoding.storage.zeroc.FullNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.setFullNodeLength(iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFullNodeLengthForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.FullNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.FullNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.setFullNodeLengthForAccount(iceP_account, iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_releaseFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        String iceP_path;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        obj.releaseFile(iceP_account, iceP_file, iceP_path, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_releaseNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.releaseNode(iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_releaseNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_fileLength;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.releaseNodeForAccount(iceP_account, iceP_src, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_reloadFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        String iceP_path;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        obj.reloadFile(iceP_account, iceP_file, iceP_path, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_reloadNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.reloadNode(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_reloadNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.reloadNodeForAccount(iceP_account, iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        FileDataDTO iceP_data;
        String iceP_path;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_data = FileDataDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        int ret = obj.writeFile(iceP_account, iceP_file, iceP_data, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeFileAndRelease(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        FileDataDTO iceP_data;
        String iceP_path;
        long iceP_fileLength;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_data = FileDataDTO.ice_read(istr);
        iceP_path = istr.readString();
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        int ret = obj.writeFileAndRelease(iceP_account, iceP_file, iceP_data, iceP_path, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeAccessory(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        FileDataDTO iceP_data;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_data = FileDataDTO.ice_read(istr);
        inS.endReadParams();
        int ret = obj.writeAccessory(iceP_account, iceP_file, iceP_data, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        FileDataDTO iceP_data;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_data = FileDataDTO.ice_read(istr);
        inS.endReadParams();
        int ret = obj.writeNode(iceP_src, iceP_data, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        FileDataDTO iceP_data;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_data = FileDataDTO.ice_read(istr);
        inS.endReadParams();
        int ret = obj.writeNodeForAccount(iceP_account, iceP_src, iceP_data, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_readFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.NodeFileDTO iceP_file;
        long iceP_pos;
        int iceP_size;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_file = com.maoding.storage.zeroc.NodeFileDTO.ice_read(istr);
        iceP_pos = istr.readLong();
        iceP_size = istr.readInt();
        inS.endReadParams();
        FileDataDTO ret = obj.readFile(iceP_account, iceP_file, iceP_pos, iceP_size, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileDataDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_readNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_pos;
        int iceP_size;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_pos = istr.readLong();
        iceP_size = istr.readInt();
        inS.endReadParams();
        FileDataDTO ret = obj.readNode(iceP_src, iceP_pos, iceP_size, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileDataDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_readNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        long iceP_pos;
        int iceP_size;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_pos = istr.readLong();
        iceP_size = istr.readInt();
        inS.endReadParams();
        FileDataDTO ret = obj.readNodeForAccount(iceP_account, iceP_src, iceP_pos, iceP_size, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileDataDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isEmpty(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_node;
        iceP_node = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.isEmpty(iceP_node, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isExist(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.isExist(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isExistForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.isExistForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_moveNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_dstParent;
        MoveNodeRequestDTO iceP_request;
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_dstParent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = MoveNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.moveNode(iceP_src, iceP_dstParent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_moveNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_src;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_dstParent;
        MoveNodeRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_src = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_dstParent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = MoveNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.moveNodeForAccount(iceP_account, iceP_src, iceP_dstParent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createDirectory(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createDirectory(iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createDirectoryForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createDirectoryForAccount(iceP_account, iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createFile(iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createFileForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createFileForAccount(iceP_account, iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createNode(iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.SimpleNodeDTO iceP_parent;
        CreateNodeRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_parent = com.maoding.storage.zeroc.SimpleNodeDTO.ice_read(istr);
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.createNodeForAccount(iceP_account, iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeById(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        iceP_id = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeById(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByIdForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_id;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeByIdForAccount(iceP_account, iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByPath(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeByPath(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByPathForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeByPathForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByFuzzyPath(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fuzzyPath;
        iceP_fuzzyPath = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeByFuzzyPath(iceP_fuzzyPath, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByFuzzyPathForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        String iceP_fuzzyPath;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_fuzzyPath = istr.readString();
        inS.endReadParams();
        com.maoding.storage.zeroc.SimpleNodeDTO ret = obj.getNodeByFuzzyPathForAccount(iceP_account, iceP_fuzzyPath, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listRootNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listRootNode(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listRootNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listRootNodeForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAllNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listAllNode(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAllNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listAllNodeForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listNode(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.storage.zeroc.QueryNodeDTO iceP_query;
        iceP_query = com.maoding.storage.zeroc.QueryNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listNode(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listNodeForAccount(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        com.maoding.storage.zeroc.QueryNodeDTO iceP_query;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_query = com.maoding.storage.zeroc.QueryNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> ret = obj.listNodeForAccount(iceP_account, iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "addAccessory",
        "askCANodeListRequest",
        "askCANodeListRequestForAccount",
        "askCANodeRequest",
        "askCANodeRequestForAccount",
        "auditNodeListRequest",
        "auditNodeListRequestForAccount",
        "auditNodeRequest",
        "auditNodeRequestForAccount",
        "changeNodeOwner",
        "changeNodeOwnerForAccount",
        "checkNodeListRequest",
        "checkNodeListRequestForAccount",
        "checkNodeRequest",
        "checkNodeRequestForAccount",
        "clearAll",
        "clearKey",
        "commitNode",
        "commitNodeForAccount",
        "commitNodeList",
        "commitNodeListForAccount",
        "createAnnotate",
        "createAnnotateAudit",
        "createAnnotateCheck",
        "createDirectory",
        "createDirectoryForAccount",
        "createFile",
        "createFileForAccount",
        "createNode",
        "createNodeForAccount",
        "createVersion",
        "deleteAccessory",
        "deleteNode",
        "deleteNodeForAccount",
        "finishWebRole",
        "flushBuffer",
        "getFileInfo",
        "getFileInfoForAccount",
        "getFileLength",
        "getFullNode",
        "getFullNodeForAccount",
        "getFullNodeWithHis",
        "getFullNodeWithHisForAccount",
        "getNewestClient",
        "getNodeByFuzzyPath",
        "getNodeByFuzzyPathForAccount",
        "getNodeById",
        "getNodeByIdForAccount",
        "getNodeByPath",
        "getNodeByPathForAccount",
        "getNodeInfo",
        "getNodeInfoForAccount",
        "getNodePath",
        "getNodePathForAccount",
        "getTextInfo",
        "getTextInfoForAccount",
        "getTime",
        "getVersionLength",
        "getWebRole",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isEmpty",
        "isExist",
        "isExistForAccount",
        "issueNode",
        "issueNodeForAccount",
        "issueNodeList",
        "issueNodeListForAccount",
        "listAction",
        "listActionForAccount",
        "listAllNode",
        "listAllNodeForAccount",
        "listAllWebRole",
        "listAnnotate",
        "listCANode",
        "listChildNode",
        "listChildNodeForAccount",
        "listChildrenNode",
        "listChildrenNodeForAccount",
        "listDesignNode",
        "listFile",
        "listHistory",
        "listHistoryForAccount",
        "listMajor",
        "listMajorForAccount",
        "listNode",
        "listNodeForAccount",
        "listProjectRoleByProjectId",
        "listProjectRoleByProjectIdForAccount",
        "listRootNode",
        "listRootNodeForAccount",
        "listValidFile",
        "listWebArchiveDir",
        "listWebArchiveDirForAccount",
        "listWebRoleTask",
        "login",
        "moveNode",
        "moveNodeForAccount",
        "readFile",
        "readNode",
        "readNodeForAccount",
        "readVersion",
        "releaseFile",
        "releaseNode",
        "releaseNodeForAccount",
        "reloadFile",
        "reloadNode",
        "reloadNodeForAccount",
        "requestCommitForAccount",
        "requestCommitListForAccount",
        "requestIssueForAccount",
        "requestIssueListForAccount",
        "restartWebRole",
        "setFileLength",
        "setFullNodeLength",
        "setFullNodeLengthForAccount",
        "setNodeLength",
        "setNodeLengthForAccount",
        "setNoticeClient",
        "setStorageService",
        "setWebRoleStatus",
        "summaryFile",
        "updateAnnotate",
        "updateNodeList",
        "updateVersion",
        "writeAccessory",
        "writeFile",
        "writeFileAndRelease",
        "writeNode",
        "writeNodeForAccount"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addAccessory(this, in, current);
            }
            case 1:
            {
                return _iceD_askCANodeListRequest(this, in, current);
            }
            case 2:
            {
                return _iceD_askCANodeListRequestForAccount(this, in, current);
            }
            case 3:
            {
                return _iceD_askCANodeRequest(this, in, current);
            }
            case 4:
            {
                return _iceD_askCANodeRequestForAccount(this, in, current);
            }
            case 5:
            {
                return _iceD_auditNodeListRequest(this, in, current);
            }
            case 6:
            {
                return _iceD_auditNodeListRequestForAccount(this, in, current);
            }
            case 7:
            {
                return _iceD_auditNodeRequest(this, in, current);
            }
            case 8:
            {
                return _iceD_auditNodeRequestForAccount(this, in, current);
            }
            case 9:
            {
                return _iceD_changeNodeOwner(this, in, current);
            }
            case 10:
            {
                return _iceD_changeNodeOwnerForAccount(this, in, current);
            }
            case 11:
            {
                return _iceD_checkNodeListRequest(this, in, current);
            }
            case 12:
            {
                return _iceD_checkNodeListRequestForAccount(this, in, current);
            }
            case 13:
            {
                return _iceD_checkNodeRequest(this, in, current);
            }
            case 14:
            {
                return _iceD_checkNodeRequestForAccount(this, in, current);
            }
            case 15:
            {
                return _iceD_clearAll(this, in, current);
            }
            case 16:
            {
                return _iceD_clearKey(this, in, current);
            }
            case 17:
            {
                return _iceD_commitNode(this, in, current);
            }
            case 18:
            {
                return _iceD_commitNodeForAccount(this, in, current);
            }
            case 19:
            {
                return _iceD_commitNodeList(this, in, current);
            }
            case 20:
            {
                return _iceD_commitNodeListForAccount(this, in, current);
            }
            case 21:
            {
                return _iceD_createAnnotate(this, in, current);
            }
            case 22:
            {
                return _iceD_createAnnotateAudit(this, in, current);
            }
            case 23:
            {
                return _iceD_createAnnotateCheck(this, in, current);
            }
            case 24:
            {
                return _iceD_createDirectory(this, in, current);
            }
            case 25:
            {
                return _iceD_createDirectoryForAccount(this, in, current);
            }
            case 26:
            {
                return _iceD_createFile(this, in, current);
            }
            case 27:
            {
                return _iceD_createFileForAccount(this, in, current);
            }
            case 28:
            {
                return _iceD_createNode(this, in, current);
            }
            case 29:
            {
                return _iceD_createNodeForAccount(this, in, current);
            }
            case 30:
            {
                return _iceD_createVersion(this, in, current);
            }
            case 31:
            {
                return _iceD_deleteAccessory(this, in, current);
            }
            case 32:
            {
                return _iceD_deleteNode(this, in, current);
            }
            case 33:
            {
                return _iceD_deleteNodeForAccount(this, in, current);
            }
            case 34:
            {
                return _iceD_finishWebRole(this, in, current);
            }
            case 35:
            {
                return _iceD_flushBuffer(this, in, current);
            }
            case 36:
            {
                return _iceD_getFileInfo(this, in, current);
            }
            case 37:
            {
                return _iceD_getFileInfoForAccount(this, in, current);
            }
            case 38:
            {
                return _iceD_getFileLength(this, in, current);
            }
            case 39:
            {
                return _iceD_getFullNode(this, in, current);
            }
            case 40:
            {
                return _iceD_getFullNodeForAccount(this, in, current);
            }
            case 41:
            {
                return _iceD_getFullNodeWithHis(this, in, current);
            }
            case 42:
            {
                return _iceD_getFullNodeWithHisForAccount(this, in, current);
            }
            case 43:
            {
                return _iceD_getNewestClient(this, in, current);
            }
            case 44:
            {
                return _iceD_getNodeByFuzzyPath(this, in, current);
            }
            case 45:
            {
                return _iceD_getNodeByFuzzyPathForAccount(this, in, current);
            }
            case 46:
            {
                return _iceD_getNodeById(this, in, current);
            }
            case 47:
            {
                return _iceD_getNodeByIdForAccount(this, in, current);
            }
            case 48:
            {
                return _iceD_getNodeByPath(this, in, current);
            }
            case 49:
            {
                return _iceD_getNodeByPathForAccount(this, in, current);
            }
            case 50:
            {
                return _iceD_getNodeInfo(this, in, current);
            }
            case 51:
            {
                return _iceD_getNodeInfoForAccount(this, in, current);
            }
            case 52:
            {
                return _iceD_getNodePath(this, in, current);
            }
            case 53:
            {
                return _iceD_getNodePathForAccount(this, in, current);
            }
            case 54:
            {
                return _iceD_getTextInfo(this, in, current);
            }
            case 55:
            {
                return _iceD_getTextInfoForAccount(this, in, current);
            }
            case 56:
            {
                return _iceD_getTime(this, in, current);
            }
            case 57:
            {
                return _iceD_getVersionLength(this, in, current);
            }
            case 58:
            {
                return _iceD_getWebRole(this, in, current);
            }
            case 59:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 60:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 61:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 62:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 63:
            {
                return _iceD_isEmpty(this, in, current);
            }
            case 64:
            {
                return _iceD_isExist(this, in, current);
            }
            case 65:
            {
                return _iceD_isExistForAccount(this, in, current);
            }
            case 66:
            {
                return _iceD_issueNode(this, in, current);
            }
            case 67:
            {
                return _iceD_issueNodeForAccount(this, in, current);
            }
            case 68:
            {
                return _iceD_issueNodeList(this, in, current);
            }
            case 69:
            {
                return _iceD_issueNodeListForAccount(this, in, current);
            }
            case 70:
            {
                return _iceD_listAction(this, in, current);
            }
            case 71:
            {
                return _iceD_listActionForAccount(this, in, current);
            }
            case 72:
            {
                return _iceD_listAllNode(this, in, current);
            }
            case 73:
            {
                return _iceD_listAllNodeForAccount(this, in, current);
            }
            case 74:
            {
                return _iceD_listAllWebRole(this, in, current);
            }
            case 75:
            {
                return _iceD_listAnnotate(this, in, current);
            }
            case 76:
            {
                return _iceD_listCANode(this, in, current);
            }
            case 77:
            {
                return _iceD_listChildNode(this, in, current);
            }
            case 78:
            {
                return _iceD_listChildNodeForAccount(this, in, current);
            }
            case 79:
            {
                return _iceD_listChildrenNode(this, in, current);
            }
            case 80:
            {
                return _iceD_listChildrenNodeForAccount(this, in, current);
            }
            case 81:
            {
                return _iceD_listDesignNode(this, in, current);
            }
            case 82:
            {
                return _iceD_listFile(this, in, current);
            }
            case 83:
            {
                return _iceD_listHistory(this, in, current);
            }
            case 84:
            {
                return _iceD_listHistoryForAccount(this, in, current);
            }
            case 85:
            {
                return _iceD_listMajor(this, in, current);
            }
            case 86:
            {
                return _iceD_listMajorForAccount(this, in, current);
            }
            case 87:
            {
                return _iceD_listNode(this, in, current);
            }
            case 88:
            {
                return _iceD_listNodeForAccount(this, in, current);
            }
            case 89:
            {
                return _iceD_listProjectRoleByProjectId(this, in, current);
            }
            case 90:
            {
                return _iceD_listProjectRoleByProjectIdForAccount(this, in, current);
            }
            case 91:
            {
                return _iceD_listRootNode(this, in, current);
            }
            case 92:
            {
                return _iceD_listRootNodeForAccount(this, in, current);
            }
            case 93:
            {
                return _iceD_listValidFile(this, in, current);
            }
            case 94:
            {
                return _iceD_listWebArchiveDir(this, in, current);
            }
            case 95:
            {
                return _iceD_listWebArchiveDirForAccount(this, in, current);
            }
            case 96:
            {
                return _iceD_listWebRoleTask(this, in, current);
            }
            case 97:
            {
                return _iceD_login(this, in, current);
            }
            case 98:
            {
                return _iceD_moveNode(this, in, current);
            }
            case 99:
            {
                return _iceD_moveNodeForAccount(this, in, current);
            }
            case 100:
            {
                return _iceD_readFile(this, in, current);
            }
            case 101:
            {
                return _iceD_readNode(this, in, current);
            }
            case 102:
            {
                return _iceD_readNodeForAccount(this, in, current);
            }
            case 103:
            {
                return _iceD_readVersion(this, in, current);
            }
            case 104:
            {
                return _iceD_releaseFile(this, in, current);
            }
            case 105:
            {
                return _iceD_releaseNode(this, in, current);
            }
            case 106:
            {
                return _iceD_releaseNodeForAccount(this, in, current);
            }
            case 107:
            {
                return _iceD_reloadFile(this, in, current);
            }
            case 108:
            {
                return _iceD_reloadNode(this, in, current);
            }
            case 109:
            {
                return _iceD_reloadNodeForAccount(this, in, current);
            }
            case 110:
            {
                return _iceD_requestCommitForAccount(this, in, current);
            }
            case 111:
            {
                return _iceD_requestCommitListForAccount(this, in, current);
            }
            case 112:
            {
                return _iceD_requestIssueForAccount(this, in, current);
            }
            case 113:
            {
                return _iceD_requestIssueListForAccount(this, in, current);
            }
            case 114:
            {
                return _iceD_restartWebRole(this, in, current);
            }
            case 115:
            {
                return _iceD_setFileLength(this, in, current);
            }
            case 116:
            {
                return _iceD_setFullNodeLength(this, in, current);
            }
            case 117:
            {
                return _iceD_setFullNodeLengthForAccount(this, in, current);
            }
            case 118:
            {
                return _iceD_setNodeLength(this, in, current);
            }
            case 119:
            {
                return _iceD_setNodeLengthForAccount(this, in, current);
            }
            case 120:
            {
                return _iceD_setNoticeClient(this, in, current);
            }
            case 121:
            {
                return _iceD_setStorageService(this, in, current);
            }
            case 122:
            {
                return _iceD_setWebRoleStatus(this, in, current);
            }
            case 123:
            {
                return _iceD_summaryFile(this, in, current);
            }
            case 124:
            {
                return _iceD_updateAnnotate(this, in, current);
            }
            case 125:
            {
                return _iceD_updateNodeList(this, in, current);
            }
            case 126:
            {
                return _iceD_updateVersion(this, in, current);
            }
            case 127:
            {
                return _iceD_writeAccessory(this, in, current);
            }
            case 128:
            {
                return _iceD_writeFile(this, in, current);
            }
            case 129:
            {
                return _iceD_writeFileAndRelease(this, in, current);
            }
            case 130:
            {
                return _iceD_writeNode(this, in, current);
            }
            case 131:
            {
                return _iceD_writeNodeForAccount(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
