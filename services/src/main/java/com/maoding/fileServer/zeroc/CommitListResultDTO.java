// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServerData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.fileServer.zeroc;

public class CommitListResultDTO implements java.lang.Cloneable,
                                            java.io.Serializable
{
    public java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> successList;

    public java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> getSuccessList()
    {
        return successList;
    }

    public void setSuccessList(java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> successList)
    {
        this.successList = successList;
    }

    public java.util.List<CommitFailDTO> failList;

    public java.util.List<CommitFailDTO> getFailList()
    {
        return failList;
    }

    public void setFailList(java.util.List<CommitFailDTO> failList)
    {
        this.failList = failList;
    }

    public CommitListResultDTO()
    {
    }

    public CommitListResultDTO(java.util.List<com.maoding.storage.zeroc.SimpleNodeDTO> successList, java.util.List<CommitFailDTO> failList)
    {
        this.successList = successList;
        this.failList = failList;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CommitListResultDTO r = null;
        if(rhs instanceof CommitListResultDTO)
        {
            r = (CommitListResultDTO)rhs;
        }

        if(r != null)
        {
            if(this.successList != r.successList)
            {
                if(this.successList == null || r.successList == null || !this.successList.equals(r.successList))
                {
                    return false;
                }
            }
            if(this.failList != r.failList)
            {
                if(this.failList == null || r.failList == null || !this.failList.equals(r.failList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::CommitListResultDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, successList);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, failList);
        return h_;
    }

    public CommitListResultDTO clone()
    {
        CommitListResultDTO c = null;
        try
        {
            c = (CommitListResultDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        com.maoding.storage.zeroc.SimpleNodeListHelper.write(ostr, this.successList);
        CommitFailListHelper.write(ostr, this.failList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.successList = com.maoding.storage.zeroc.SimpleNodeListHelper.read(istr);
        this.failList = CommitFailListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CommitListResultDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CommitListResultDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        CommitListResultDTO v = new CommitListResultDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CommitListResultDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CommitListResultDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CommitListResultDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CommitListResultDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CommitListResultDTO _nullMarshalValue = new CommitListResultDTO();

    public static final long serialVersionUID = 184411374L;
}
