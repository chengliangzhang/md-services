// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `UserData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.user.zeroc;

public class LoginDTO implements java.lang.Cloneable,
                                 java.io.Serializable
{
    public String accountId;

    public String getAccountId()
    {
        return accountId;
    }

    public void setAccountId(String accountId)
    {
        this.accountId = accountId;
    }

    public String encryptPassword;

    public String getEncryptPassword()
    {
        return encryptPassword;
    }

    public void setEncryptPassword(String encryptPassword)
    {
        this.encryptPassword = encryptPassword;
    }

    public boolean isRemember;

    public boolean getIsRemember()
    {
        return isRemember;
    }

    public void setIsRemember(boolean isRemember)
    {
        this.isRemember = isRemember;
    }

    public boolean isIsRemember()
    {
        return isRemember;
    }

    public String password;

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String cellphone;

    public String getCellphone()
    {
        return cellphone;
    }

    public void setCellphone(String cellphone)
    {
        this.cellphone = cellphone;
    }

    public LoginDTO()
    {
        this.accountId = "";
        this.encryptPassword = "";
        this.password = "";
        this.cellphone = "";
    }

    public LoginDTO(String accountId, String encryptPassword, boolean isRemember, String password, String cellphone)
    {
        this.accountId = accountId;
        this.encryptPassword = encryptPassword;
        this.isRemember = isRemember;
        this.password = password;
        this.cellphone = cellphone;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoginDTO r = null;
        if(rhs instanceof LoginDTO)
        {
            r = (LoginDTO)rhs;
        }

        if(r != null)
        {
            if(this.accountId != r.accountId)
            {
                if(this.accountId == null || r.accountId == null || !this.accountId.equals(r.accountId))
                {
                    return false;
                }
            }
            if(this.encryptPassword != r.encryptPassword)
            {
                if(this.encryptPassword == null || r.encryptPassword == null || !this.encryptPassword.equals(r.encryptPassword))
                {
                    return false;
                }
            }
            if(this.isRemember != r.isRemember)
            {
                return false;
            }
            if(this.password != r.password)
            {
                if(this.password == null || r.password == null || !this.password.equals(r.password))
                {
                    return false;
                }
            }
            if(this.cellphone != r.cellphone)
            {
                if(this.cellphone == null || r.cellphone == null || !this.cellphone.equals(r.cellphone))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::LoginDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accountId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, encryptPassword);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isRemember);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, password);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, cellphone);
        return h_;
    }

    public LoginDTO clone()
    {
        LoginDTO c = null;
        try
        {
            c = (LoginDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.accountId);
        ostr.writeString(this.encryptPassword);
        ostr.writeBool(this.isRemember);
        ostr.writeString(this.password);
        ostr.writeString(this.cellphone);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.accountId = istr.readString();
        this.encryptPassword = istr.readString();
        this.isRemember = istr.readBool();
        this.password = istr.readString();
        this.cellphone = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LoginDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LoginDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        LoginDTO v = new LoginDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LoginDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LoginDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LoginDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LoginDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LoginDTO _nullMarshalValue = new LoginDTO();

    public static final long serialVersionUID = 860195997L;
}
