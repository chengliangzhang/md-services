// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `CommonData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.common.zeroc;

public class VersionDTO implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public String versionName;

    public String getVersionName()
    {
        return versionName;
    }

    public void setVersionName(String versionName)
    {
        this.versionName = versionName;
    }

    public String updateUrl;

    public String getUpdateUrl()
    {
        return updateUrl;
    }

    public void setUpdateUrl(String updateUrl)
    {
        this.updateUrl = updateUrl;
    }

    public String description;

    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public String svnVersion;

    public String getSvnVersion()
    {
        return svnVersion;
    }

    public void setSvnVersion(String svnVersion)
    {
        this.svnVersion = svnVersion;
    }

    public VersionDTO()
    {
        this.id = "";
        this.versionName = "";
        this.updateUrl = "";
        this.description = "";
        this.svnVersion = "";
    }

    public VersionDTO(String id, String versionName, String updateUrl, String description, String svnVersion)
    {
        this.id = id;
        this.versionName = versionName;
        this.updateUrl = updateUrl;
        this.description = description;
        this.svnVersion = svnVersion;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        VersionDTO r = null;
        if(rhs instanceof VersionDTO)
        {
            r = (VersionDTO)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.versionName != r.versionName)
            {
                if(this.versionName == null || r.versionName == null || !this.versionName.equals(r.versionName))
                {
                    return false;
                }
            }
            if(this.updateUrl != r.updateUrl)
            {
                if(this.updateUrl == null || r.updateUrl == null || !this.updateUrl.equals(r.updateUrl))
                {
                    return false;
                }
            }
            if(this.description != r.description)
            {
                if(this.description == null || r.description == null || !this.description.equals(r.description))
                {
                    return false;
                }
            }
            if(this.svnVersion != r.svnVersion)
            {
                if(this.svnVersion == null || r.svnVersion == null || !this.svnVersion.equals(r.svnVersion))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::VersionDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, versionName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, updateUrl);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, description);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, svnVersion);
        return h_;
    }

    public VersionDTO clone()
    {
        VersionDTO c = null;
        try
        {
            c = (VersionDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.versionName);
        ostr.writeString(this.updateUrl);
        ostr.writeString(this.description);
        ostr.writeString(this.svnVersion);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readString();
        this.versionName = istr.readString();
        this.updateUrl = istr.readString();
        this.description = istr.readString();
        this.svnVersion = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, VersionDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public VersionDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        VersionDTO v = new VersionDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<VersionDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, VersionDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<VersionDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(VersionDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final VersionDTO _nullMarshalValue = new VersionDTO();

    public static final long serialVersionUID = -1170253067L;
}
