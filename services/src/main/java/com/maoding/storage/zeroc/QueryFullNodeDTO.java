// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class QueryFullNodeDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public String statusAttr;

    public String getStatusAttr()
    {
        return statusAttr;
    }

    public void setStatusAttr(String statusAttr)
    {
        this.statusAttr = statusAttr;
    }

    public String passDesign;

    public String getPassDesign()
    {
        return passDesign;
    }

    public void setPassDesign(String passDesign)
    {
        this.passDesign = passDesign;
    }

    public String passCheck;

    public String getPassCheck()
    {
        return passCheck;
    }

    public void setPassCheck(String passCheck)
    {
        this.passCheck = passCheck;
    }

    public String passAudit;

    public String getPassAudit()
    {
        return passAudit;
    }

    public void setPassAudit(String passAudit)
    {
        this.passAudit = passAudit;
    }

    public String nodeTypeAttr;

    public String getNodeTypeAttr()
    {
        return nodeTypeAttr;
    }

    public void setNodeTypeAttr(String nodeTypeAttr)
    {
        this.nodeTypeAttr = nodeTypeAttr;
    }

    public String isDesign;

    public String getIsDesign()
    {
        return isDesign;
    }

    public void setIsDesign(String isDesign)
    {
        this.isDesign = isDesign;
    }

    public String isCA;

    public String getIsCA()
    {
        return isCA;
    }

    public void setIsCA(String isCA)
    {
        this.isCA = isCA;
    }

    public String isCommit;

    public String getIsCommit()
    {
        return isCommit;
    }

    public void setIsCommit(String isCommit)
    {
        this.isCommit = isCommit;
    }

    public String isHistory;

    public String getIsHistory()
    {
        return isHistory;
    }

    public void setIsHistory(String isHistory)
    {
        this.isHistory = isHistory;
    }

    public String userId;

    public String getUserId()
    {
        return userId;
    }

    public void setUserId(String userId)
    {
        this.userId = userId;
    }

    public String roleAttr;

    public String getRoleAttr()
    {
        return roleAttr;
    }

    public void setRoleAttr(String roleAttr)
    {
        this.roleAttr = roleAttr;
    }

    public String isTaskLeader;

    public String getIsTaskLeader()
    {
        return isTaskLeader;
    }

    public void setIsTaskLeader(String isTaskLeader)
    {
        this.isTaskLeader = isTaskLeader;
    }

    public String isTaskDesigner;

    public String getIsTaskDesigner()
    {
        return isTaskDesigner;
    }

    public void setIsTaskDesigner(String isTaskDesigner)
    {
        this.isTaskDesigner = isTaskDesigner;
    }

    public String isTaskChecker;

    public String getIsTaskChecker()
    {
        return isTaskChecker;
    }

    public void setIsTaskChecker(String isTaskChecker)
    {
        this.isTaskChecker = isTaskChecker;
    }

    public String isTaskAuditor;

    public String getIsTaskAuditor()
    {
        return isTaskAuditor;
    }

    public void setIsTaskAuditor(String isTaskAuditor)
    {
        this.isTaskAuditor = isTaskAuditor;
    }

    public String actionAttr;

    public String getActionAttr()
    {
        return actionAttr;
    }

    public void setActionAttr(String actionAttr)
    {
        this.actionAttr = actionAttr;
    }

    public String askCA;

    public String getAskCA()
    {
        return askCA;
    }

    public void setAskCA(String askCA)
    {
        this.askCA = askCA;
    }

    public String askCommit;

    public String getAskCommit()
    {
        return askCommit;
    }

    public void setAskCommit(String askCommit)
    {
        this.askCommit = askCommit;
    }

    public String key;

    public String getKey()
    {
        return key;
    }

    public void setKey(String key)
    {
        this.key = key;
    }

    public QueryFullNodeDTO()
    {
        this.statusAttr = "";
        this.passDesign = "";
        this.passCheck = "";
        this.passAudit = "";
        this.nodeTypeAttr = "";
        this.isDesign = "";
        this.isCA = "";
        this.isCommit = "";
        this.isHistory = "";
        this.userId = "";
        this.roleAttr = "";
        this.isTaskLeader = "";
        this.isTaskDesigner = "";
        this.isTaskChecker = "";
        this.isTaskAuditor = "";
        this.actionAttr = "";
        this.askCA = "";
        this.askCommit = "";
        this.key = "";
    }

    public QueryFullNodeDTO(String statusAttr, String passDesign, String passCheck, String passAudit, String nodeTypeAttr, String isDesign, String isCA, String isCommit, String isHistory, String userId, String roleAttr, String isTaskLeader, String isTaskDesigner, String isTaskChecker, String isTaskAuditor, String actionAttr, String askCA, String askCommit, String key)
    {
        this.statusAttr = statusAttr;
        this.passDesign = passDesign;
        this.passCheck = passCheck;
        this.passAudit = passAudit;
        this.nodeTypeAttr = nodeTypeAttr;
        this.isDesign = isDesign;
        this.isCA = isCA;
        this.isCommit = isCommit;
        this.isHistory = isHistory;
        this.userId = userId;
        this.roleAttr = roleAttr;
        this.isTaskLeader = isTaskLeader;
        this.isTaskDesigner = isTaskDesigner;
        this.isTaskChecker = isTaskChecker;
        this.isTaskAuditor = isTaskAuditor;
        this.actionAttr = actionAttr;
        this.askCA = askCA;
        this.askCommit = askCommit;
        this.key = key;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        QueryFullNodeDTO r = null;
        if(rhs instanceof QueryFullNodeDTO)
        {
            r = (QueryFullNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.statusAttr != r.statusAttr)
            {
                if(this.statusAttr == null || r.statusAttr == null || !this.statusAttr.equals(r.statusAttr))
                {
                    return false;
                }
            }
            if(this.passDesign != r.passDesign)
            {
                if(this.passDesign == null || r.passDesign == null || !this.passDesign.equals(r.passDesign))
                {
                    return false;
                }
            }
            if(this.passCheck != r.passCheck)
            {
                if(this.passCheck == null || r.passCheck == null || !this.passCheck.equals(r.passCheck))
                {
                    return false;
                }
            }
            if(this.passAudit != r.passAudit)
            {
                if(this.passAudit == null || r.passAudit == null || !this.passAudit.equals(r.passAudit))
                {
                    return false;
                }
            }
            if(this.nodeTypeAttr != r.nodeTypeAttr)
            {
                if(this.nodeTypeAttr == null || r.nodeTypeAttr == null || !this.nodeTypeAttr.equals(r.nodeTypeAttr))
                {
                    return false;
                }
            }
            if(this.isDesign != r.isDesign)
            {
                if(this.isDesign == null || r.isDesign == null || !this.isDesign.equals(r.isDesign))
                {
                    return false;
                }
            }
            if(this.isCA != r.isCA)
            {
                if(this.isCA == null || r.isCA == null || !this.isCA.equals(r.isCA))
                {
                    return false;
                }
            }
            if(this.isCommit != r.isCommit)
            {
                if(this.isCommit == null || r.isCommit == null || !this.isCommit.equals(r.isCommit))
                {
                    return false;
                }
            }
            if(this.isHistory != r.isHistory)
            {
                if(this.isHistory == null || r.isHistory == null || !this.isHistory.equals(r.isHistory))
                {
                    return false;
                }
            }
            if(this.userId != r.userId)
            {
                if(this.userId == null || r.userId == null || !this.userId.equals(r.userId))
                {
                    return false;
                }
            }
            if(this.roleAttr != r.roleAttr)
            {
                if(this.roleAttr == null || r.roleAttr == null || !this.roleAttr.equals(r.roleAttr))
                {
                    return false;
                }
            }
            if(this.isTaskLeader != r.isTaskLeader)
            {
                if(this.isTaskLeader == null || r.isTaskLeader == null || !this.isTaskLeader.equals(r.isTaskLeader))
                {
                    return false;
                }
            }
            if(this.isTaskDesigner != r.isTaskDesigner)
            {
                if(this.isTaskDesigner == null || r.isTaskDesigner == null || !this.isTaskDesigner.equals(r.isTaskDesigner))
                {
                    return false;
                }
            }
            if(this.isTaskChecker != r.isTaskChecker)
            {
                if(this.isTaskChecker == null || r.isTaskChecker == null || !this.isTaskChecker.equals(r.isTaskChecker))
                {
                    return false;
                }
            }
            if(this.isTaskAuditor != r.isTaskAuditor)
            {
                if(this.isTaskAuditor == null || r.isTaskAuditor == null || !this.isTaskAuditor.equals(r.isTaskAuditor))
                {
                    return false;
                }
            }
            if(this.actionAttr != r.actionAttr)
            {
                if(this.actionAttr == null || r.actionAttr == null || !this.actionAttr.equals(r.actionAttr))
                {
                    return false;
                }
            }
            if(this.askCA != r.askCA)
            {
                if(this.askCA == null || r.askCA == null || !this.askCA.equals(r.askCA))
                {
                    return false;
                }
            }
            if(this.askCommit != r.askCommit)
            {
                if(this.askCommit == null || r.askCommit == null || !this.askCommit.equals(r.askCommit))
                {
                    return false;
                }
            }
            if(this.key != r.key)
            {
                if(this.key == null || r.key == null || !this.key.equals(r.key))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::QueryFullNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, statusAttr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, passAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nodeTypeAttr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isCA);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isCommit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isHistory);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, userId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, roleAttr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isTaskLeader);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isTaskDesigner);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isTaskChecker);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isTaskAuditor);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionAttr);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, askCA);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, askCommit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, key);
        return h_;
    }

    public QueryFullNodeDTO clone()
    {
        QueryFullNodeDTO c = null;
        try
        {
            c = (QueryFullNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.statusAttr);
        ostr.writeString(this.passDesign);
        ostr.writeString(this.passCheck);
        ostr.writeString(this.passAudit);
        ostr.writeString(this.nodeTypeAttr);
        ostr.writeString(this.isDesign);
        ostr.writeString(this.isCA);
        ostr.writeString(this.isCommit);
        ostr.writeString(this.isHistory);
        ostr.writeString(this.userId);
        ostr.writeString(this.roleAttr);
        ostr.writeString(this.isTaskLeader);
        ostr.writeString(this.isTaskDesigner);
        ostr.writeString(this.isTaskChecker);
        ostr.writeString(this.isTaskAuditor);
        ostr.writeString(this.actionAttr);
        ostr.writeString(this.askCA);
        ostr.writeString(this.askCommit);
        ostr.writeString(this.key);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.statusAttr = istr.readString();
        this.passDesign = istr.readString();
        this.passCheck = istr.readString();
        this.passAudit = istr.readString();
        this.nodeTypeAttr = istr.readString();
        this.isDesign = istr.readString();
        this.isCA = istr.readString();
        this.isCommit = istr.readString();
        this.isHistory = istr.readString();
        this.userId = istr.readString();
        this.roleAttr = istr.readString();
        this.isTaskLeader = istr.readString();
        this.isTaskDesigner = istr.readString();
        this.isTaskChecker = istr.readString();
        this.isTaskAuditor = istr.readString();
        this.actionAttr = istr.readString();
        this.askCA = istr.readString();
        this.askCommit = istr.readString();
        this.key = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, QueryFullNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public QueryFullNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        QueryFullNodeDTO v = new QueryFullNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<QueryFullNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, QueryFullNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<QueryFullNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(QueryFullNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final QueryFullNodeDTO _nullMarshalValue = new QueryFullNodeDTO();

    public static final long serialVersionUID = -2082329055L;
}
