// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Notice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.notice.zeroc;

public interface NoticeService extends com.zeroc.Ice.Object
{
    void createTopic(String topic, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<java.lang.String> listTopic(com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    java.util.List<java.lang.String> listSubscribedTopic(String userId, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void notice(MessageDTO message, String topic, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void noticeToUser(MessageDTO message, String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void noticeToTask(MessageDTO message, String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void noticeToProject(MessageDTO message, String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void noticeToCompany(MessageDTO message, String id, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopic(String topic, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForWeb(String topic, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForUser(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForTask(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForProject(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForCompany(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void subscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopic(String topic, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForUser(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForTask(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForProject(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForCompany(String id, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForTaskList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForProjectList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void unSubscribeTopicForCompanyList(java.util.List<java.lang.String> idList, NoticeClientPrx client, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void sendNotice(NoticeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    void sendNoticeForAccount(com.maoding.user.zeroc.AccountDTO account, NoticeRequestDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.common.zeroc.CustomException;

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::NoticeService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::NoticeService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createTopic(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_topic;
        iceP_topic = istr.readString();
        inS.endReadParams();
        obj.createTopic(iceP_topic, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listTopic(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<java.lang.String> ret = obj.listTopic(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.StringListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubscribedTopic(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_userId;
        iceP_userId = istr.readString();
        inS.endReadParams();
        java.util.List<java.lang.String> ret = obj.listSubscribedTopic(iceP_userId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.common.zeroc.StringListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_notice(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MessageDTO iceP_message;
        String iceP_topic;
        iceP_message = MessageDTO.ice_read(istr);
        iceP_topic = istr.readString();
        inS.endReadParams();
        obj.notice(iceP_message, iceP_topic, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_noticeToUser(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MessageDTO iceP_message;
        String iceP_id;
        iceP_message = MessageDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        obj.noticeToUser(iceP_message, iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_noticeToTask(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MessageDTO iceP_message;
        String iceP_id;
        iceP_message = MessageDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        obj.noticeToTask(iceP_message, iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_noticeToProject(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MessageDTO iceP_message;
        String iceP_id;
        iceP_message = MessageDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        obj.noticeToProject(iceP_message, iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_noticeToCompany(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MessageDTO iceP_message;
        String iceP_id;
        iceP_message = MessageDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        obj.noticeToCompany(iceP_message, iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopic(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_topic;
        NoticeClientPrx iceP_client;
        iceP_topic = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopic(iceP_topic, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForAccount(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        NoticeClientPrx iceP_client;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForAccount(iceP_account, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForAccount(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        NoticeClientPrx iceP_client;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForAccount(iceP_account, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForWeb(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_topic;
        NoticeClientPrx iceP_client;
        iceP_topic = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForWeb(iceP_topic, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForUser(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForUser(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForTask(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForTask(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForProject(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForProject(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForCompany(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForCompany(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForTaskList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForTaskList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForProjectList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForProjectList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_subscribeTopicForCompanyList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.subscribeTopicForCompanyList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopic(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_topic;
        NoticeClientPrx iceP_client;
        iceP_topic = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopic(iceP_topic, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForUser(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForUser(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForTask(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForTask(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForProject(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForProject(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForCompany(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        NoticeClientPrx iceP_client;
        iceP_id = istr.readString();
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForCompany(iceP_id, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForTaskList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForTaskList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForProjectList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForProjectList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unSubscribeTopicForCompanyList(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_idList;
        NoticeClientPrx iceP_client;
        iceP_idList = com.maoding.common.zeroc.StringListHelper.read(istr);
        iceP_client = NoticeClientPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unSubscribeTopicForCompanyList(iceP_idList, iceP_client, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendNotice(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        NoticeRequestDTO iceP_request;
        iceP_request = NoticeRequestDTO.ice_read(istr);
        inS.endReadParams();
        obj.sendNotice(iceP_request, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendNoticeForAccount(NoticeService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.user.zeroc.AccountDTO iceP_account;
        NoticeRequestDTO iceP_request;
        iceP_account = com.maoding.user.zeroc.AccountDTO.ice_read(istr);
        iceP_request = NoticeRequestDTO.ice_read(istr);
        inS.endReadParams();
        obj.sendNoticeForAccount(iceP_account, iceP_request, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    final static String[] _iceOps =
    {
        "createTopic",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "listSubscribedTopic",
        "listTopic",
        "notice",
        "noticeToCompany",
        "noticeToProject",
        "noticeToTask",
        "noticeToUser",
        "sendNotice",
        "sendNoticeForAccount",
        "subscribeTopic",
        "subscribeTopicForAccount",
        "subscribeTopicForCompany",
        "subscribeTopicForCompanyList",
        "subscribeTopicForProject",
        "subscribeTopicForProjectList",
        "subscribeTopicForTask",
        "subscribeTopicForTaskList",
        "subscribeTopicForUser",
        "subscribeTopicForWeb",
        "unSubscribeTopic",
        "unSubscribeTopicForAccount",
        "unSubscribeTopicForCompany",
        "unSubscribeTopicForCompanyList",
        "unSubscribeTopicForProject",
        "unSubscribeTopicForProjectList",
        "unSubscribeTopicForTask",
        "unSubscribeTopicForTaskList",
        "unSubscribeTopicForUser"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_createTopic(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_listSubscribedTopic(this, in, current);
            }
            case 6:
            {
                return _iceD_listTopic(this, in, current);
            }
            case 7:
            {
                return _iceD_notice(this, in, current);
            }
            case 8:
            {
                return _iceD_noticeToCompany(this, in, current);
            }
            case 9:
            {
                return _iceD_noticeToProject(this, in, current);
            }
            case 10:
            {
                return _iceD_noticeToTask(this, in, current);
            }
            case 11:
            {
                return _iceD_noticeToUser(this, in, current);
            }
            case 12:
            {
                return _iceD_sendNotice(this, in, current);
            }
            case 13:
            {
                return _iceD_sendNoticeForAccount(this, in, current);
            }
            case 14:
            {
                return _iceD_subscribeTopic(this, in, current);
            }
            case 15:
            {
                return _iceD_subscribeTopicForAccount(this, in, current);
            }
            case 16:
            {
                return _iceD_subscribeTopicForCompany(this, in, current);
            }
            case 17:
            {
                return _iceD_subscribeTopicForCompanyList(this, in, current);
            }
            case 18:
            {
                return _iceD_subscribeTopicForProject(this, in, current);
            }
            case 19:
            {
                return _iceD_subscribeTopicForProjectList(this, in, current);
            }
            case 20:
            {
                return _iceD_subscribeTopicForTask(this, in, current);
            }
            case 21:
            {
                return _iceD_subscribeTopicForTaskList(this, in, current);
            }
            case 22:
            {
                return _iceD_subscribeTopicForUser(this, in, current);
            }
            case 23:
            {
                return _iceD_subscribeTopicForWeb(this, in, current);
            }
            case 24:
            {
                return _iceD_unSubscribeTopic(this, in, current);
            }
            case 25:
            {
                return _iceD_unSubscribeTopicForAccount(this, in, current);
            }
            case 26:
            {
                return _iceD_unSubscribeTopicForCompany(this, in, current);
            }
            case 27:
            {
                return _iceD_unSubscribeTopicForCompanyList(this, in, current);
            }
            case 28:
            {
                return _iceD_unSubscribeTopicForProject(this, in, current);
            }
            case 29:
            {
                return _iceD_unSubscribeTopicForProjectList(this, in, current);
            }
            case 30:
            {
                return _iceD_unSubscribeTopicForTask(this, in, current);
            }
            case 31:
            {
                return _iceD_unSubscribeTopicForTaskList(this, in, current);
            }
            case 32:
            {
                return _iceD_unSubscribeTopicForUser(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
