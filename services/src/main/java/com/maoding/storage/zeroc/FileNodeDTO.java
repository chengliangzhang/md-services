// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.storage.zeroc;

public class FileNodeDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public SimpleNodeDTO basic;

    public SimpleNodeDTO getBasic()
    {
        return basic;
    }

    public void setBasic(SimpleNodeDTO basic)
    {
        this.basic = basic;
    }

    public String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String majorName;

    public String getMajorName()
    {
        return majorName;
    }

    public void setMajorName(String majorName)
    {
        this.majorName = majorName;
    }

    public long fileLength;

    public long getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(long fileLength)
    {
        this.fileLength = fileLength;
    }

    public String fileMd5;

    public String getFileMd5()
    {
        return fileMd5;
    }

    public void setFileMd5(String fileMd5)
    {
        this.fileMd5 = fileMd5;
    }

    public long createTimeStamp;

    public long getCreateTimeStamp()
    {
        return createTimeStamp;
    }

    public void setCreateTimeStamp(long createTimeStamp)
    {
        this.createTimeStamp = createTimeStamp;
    }

    public long lastModifyTimeStamp;

    public long getLastModifyTimeStamp()
    {
        return lastModifyTimeStamp;
    }

    public void setLastModifyTimeStamp(long lastModifyTimeStamp)
    {
        this.lastModifyTimeStamp = lastModifyTimeStamp;
    }

    public long lastFileLength;

    public long getLastFileLength()
    {
        return lastFileLength;
    }

    public void setLastFileLength(long lastFileLength)
    {
        this.lastFileLength = lastFileLength;
    }

    public String lastFileMd5;

    public String getLastFileMd5()
    {
        return lastFileMd5;
    }

    public void setLastFileMd5(String lastFileMd5)
    {
        this.lastFileMd5 = lastFileMd5;
    }

    public long lastCommitFileLength;

    public long getLastCommitFileLength()
    {
        return lastCommitFileLength;
    }

    public void setLastCommitFileLength(long lastCommitFileLength)
    {
        this.lastCommitFileLength = lastCommitFileLength;
    }

    public String lastCommitFileMd5;

    public String getLastCommitFileMd5()
    {
        return lastCommitFileMd5;
    }

    public void setLastCommitFileMd5(String lastCommitFileMd5)
    {
        this.lastCommitFileMd5 = lastCommitFileMd5;
    }

    public boolean isPassDesign;

    public boolean getIsPassDesign()
    {
        return isPassDesign;
    }

    public void setIsPassDesign(boolean isPassDesign)
    {
        this.isPassDesign = isPassDesign;
    }

    public boolean isIsPassDesign()
    {
        return isPassDesign;
    }

    public boolean isPassCheck;

    public boolean getIsPassCheck()
    {
        return isPassCheck;
    }

    public void setIsPassCheck(boolean isPassCheck)
    {
        this.isPassCheck = isPassCheck;
    }

    public boolean isIsPassCheck()
    {
        return isPassCheck;
    }

    public boolean isPassAudit;

    public boolean getIsPassAudit()
    {
        return isPassAudit;
    }

    public void setIsPassAudit(boolean isPassAudit)
    {
        this.isPassAudit = isPassAudit;
    }

    public boolean isIsPassAudit()
    {
        return isPassAudit;
    }

    public java.util.List<com.maoding.user.zeroc.RoleDTO> roleList;

    public java.util.List<com.maoding.user.zeroc.RoleDTO> getRoleList()
    {
        return roleList;
    }

    public void setRoleList(java.util.List<com.maoding.user.zeroc.RoleDTO> roleList)
    {
        this.roleList = roleList;
    }

    public FileNodeDTO()
    {
        this.basic = new SimpleNodeDTO();
        this.id = "";
        this.fileVersion = "";
        this.majorName = "";
        this.fileMd5 = "";
        this.lastFileMd5 = "";
        this.lastCommitFileMd5 = "";
    }

    public FileNodeDTO(SimpleNodeDTO basic, String id, String fileVersion, String majorName, long fileLength, String fileMd5, long createTimeStamp, long lastModifyTimeStamp, long lastFileLength, String lastFileMd5, long lastCommitFileLength, String lastCommitFileMd5, boolean isPassDesign, boolean isPassCheck, boolean isPassAudit, java.util.List<com.maoding.user.zeroc.RoleDTO> roleList)
    {
        this.basic = basic;
        this.id = id;
        this.fileVersion = fileVersion;
        this.majorName = majorName;
        this.fileLength = fileLength;
        this.fileMd5 = fileMd5;
        this.createTimeStamp = createTimeStamp;
        this.lastModifyTimeStamp = lastModifyTimeStamp;
        this.lastFileLength = lastFileLength;
        this.lastFileMd5 = lastFileMd5;
        this.lastCommitFileLength = lastCommitFileLength;
        this.lastCommitFileMd5 = lastCommitFileMd5;
        this.isPassDesign = isPassDesign;
        this.isPassCheck = isPassCheck;
        this.isPassAudit = isPassAudit;
        this.roleList = roleList;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FileNodeDTO r = null;
        if(rhs instanceof FileNodeDTO)
        {
            r = (FileNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.basic != r.basic)
            {
                if(this.basic == null || r.basic == null || !this.basic.equals(r.basic))
                {
                    return false;
                }
            }
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.majorName != r.majorName)
            {
                if(this.majorName == null || r.majorName == null || !this.majorName.equals(r.majorName))
                {
                    return false;
                }
            }
            if(this.fileLength != r.fileLength)
            {
                return false;
            }
            if(this.fileMd5 != r.fileMd5)
            {
                if(this.fileMd5 == null || r.fileMd5 == null || !this.fileMd5.equals(r.fileMd5))
                {
                    return false;
                }
            }
            if(this.createTimeStamp != r.createTimeStamp)
            {
                return false;
            }
            if(this.lastModifyTimeStamp != r.lastModifyTimeStamp)
            {
                return false;
            }
            if(this.lastFileLength != r.lastFileLength)
            {
                return false;
            }
            if(this.lastFileMd5 != r.lastFileMd5)
            {
                if(this.lastFileMd5 == null || r.lastFileMd5 == null || !this.lastFileMd5.equals(r.lastFileMd5))
                {
                    return false;
                }
            }
            if(this.lastCommitFileLength != r.lastCommitFileLength)
            {
                return false;
            }
            if(this.lastCommitFileMd5 != r.lastCommitFileMd5)
            {
                if(this.lastCommitFileMd5 == null || r.lastCommitFileMd5 == null || !this.lastCommitFileMd5.equals(r.lastCommitFileMd5))
                {
                    return false;
                }
            }
            if(this.isPassDesign != r.isPassDesign)
            {
                return false;
            }
            if(this.isPassCheck != r.isPassCheck)
            {
                return false;
            }
            if(this.isPassAudit != r.isPassAudit)
            {
                return false;
            }
            if(this.roleList != r.roleList)
            {
                if(this.roleList == null || r.roleList == null || !this.roleList.equals(r.roleList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::FileNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, basic);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, createTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastFileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastFileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastCommitFileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastCommitFileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, roleList);
        return h_;
    }

    public FileNodeDTO clone()
    {
        FileNodeDTO c = null;
        try
        {
            c = (FileNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        SimpleNodeDTO.ice_write(ostr, this.basic);
        ostr.writeString(this.id);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.majorName);
        ostr.writeLong(this.fileLength);
        ostr.writeString(this.fileMd5);
        ostr.writeLong(this.createTimeStamp);
        ostr.writeLong(this.lastModifyTimeStamp);
        ostr.writeLong(this.lastFileLength);
        ostr.writeString(this.lastFileMd5);
        ostr.writeLong(this.lastCommitFileLength);
        ostr.writeString(this.lastCommitFileMd5);
        ostr.writeBool(this.isPassDesign);
        ostr.writeBool(this.isPassCheck);
        ostr.writeBool(this.isPassAudit);
        com.maoding.user.zeroc.RoleListHelper.write(ostr, this.roleList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.basic = SimpleNodeDTO.ice_read(istr);
        this.id = istr.readString();
        this.fileVersion = istr.readString();
        this.majorName = istr.readString();
        this.fileLength = istr.readLong();
        this.fileMd5 = istr.readString();
        this.createTimeStamp = istr.readLong();
        this.lastModifyTimeStamp = istr.readLong();
        this.lastFileLength = istr.readLong();
        this.lastFileMd5 = istr.readString();
        this.lastCommitFileLength = istr.readLong();
        this.lastCommitFileMd5 = istr.readString();
        this.isPassDesign = istr.readBool();
        this.isPassCheck = istr.readBool();
        this.isPassAudit = istr.readBool();
        this.roleList = com.maoding.user.zeroc.RoleListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FileNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FileNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        FileNodeDTO v = new FileNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FileNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FileNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FileNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FileNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FileNodeDTO _nullMarshalValue = new FileNodeDTO();

    public static final long serialVersionUID = -950949378L;
}
